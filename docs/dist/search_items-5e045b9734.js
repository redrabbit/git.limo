searchNodes=[{"doc":"Single source of data, mediates between domain and data mapping layer.","ref":"GitGud.DB.html","title":"GitGud.DB","type":"module"},{"doc":"Callback implementation for Ecto.Repo.aggregate/3 .","ref":"GitGud.DB.html#aggregate/3","title":"GitGud.DB.aggregate/3","type":"function"},{"doc":"Callback implementation for Ecto.Repo.aggregate/4 .","ref":"GitGud.DB.html#aggregate/4","title":"GitGud.DB.aggregate/4","type":"function"},{"doc":"Callback implementation for Ecto.Repo.all/2 .","ref":"GitGud.DB.html#all/2","title":"GitGud.DB.all/2","type":"function"},{"doc":"Callback implementation for Ecto.Repo.checked_out?/0 .","ref":"GitGud.DB.html#checked_out?/0","title":"GitGud.DB.checked_out?/0","type":"function"},{"doc":"Callback implementation for Ecto.Repo.checkout/2 .","ref":"GitGud.DB.html#checkout/2","title":"GitGud.DB.checkout/2","type":"function"},{"doc":"","ref":"GitGud.DB.html#child_spec/1","title":"GitGud.DB.child_spec/1","type":"function"},{"doc":"Callback implementation for Ecto.Repo.config/0 .","ref":"GitGud.DB.html#config/0","title":"GitGud.DB.config/0","type":"function"},{"doc":"Callback implementation for Ecto.Repo.default_options/1 .","ref":"GitGud.DB.html#default_options/1","title":"GitGud.DB.default_options/1","type":"function"},{"doc":"Callback implementation for Ecto.Repo.delete/2 .","ref":"GitGud.DB.html#delete/2","title":"GitGud.DB.delete/2","type":"function"},{"doc":"Callback implementation for Ecto.Repo.delete!/2 .","ref":"GitGud.DB.html#delete!/2","title":"GitGud.DB.delete!/2","type":"function"},{"doc":"Callback implementation for Ecto.Repo.delete_all/2 .","ref":"GitGud.DB.html#delete_all/2","title":"GitGud.DB.delete_all/2","type":"function"},{"doc":"Callback implementation for Ecto.Repo.exists?/2 .","ref":"GitGud.DB.html#exists?/2","title":"GitGud.DB.exists?/2","type":"function"},{"doc":"A convenience function for SQL-based repositories that executes an EXPLAIN statement or similar depending on the adapter to obtain statistics for the given query. See Ecto.Adapters.SQL.explain/4 for more information.","ref":"GitGud.DB.html#explain/3","title":"GitGud.DB.explain/3","type":"function"},{"doc":"Callback implementation for Ecto.Repo.get/3 .","ref":"GitGud.DB.html#get/3","title":"GitGud.DB.get/3","type":"function"},{"doc":"Callback implementation for Ecto.Repo.get!/3 .","ref":"GitGud.DB.html#get!/3","title":"GitGud.DB.get!/3","type":"function"},{"doc":"Callback implementation for Ecto.Repo.get_by/3 .","ref":"GitGud.DB.html#get_by/3","title":"GitGud.DB.get_by/3","type":"function"},{"doc":"Callback implementation for Ecto.Repo.get_by!/3 .","ref":"GitGud.DB.html#get_by!/3","title":"GitGud.DB.get_by!/3","type":"function"},{"doc":"Callback implementation for Ecto.Repo.get_dynamic_repo/0 .","ref":"GitGud.DB.html#get_dynamic_repo/0","title":"GitGud.DB.get_dynamic_repo/0","type":"function"},{"doc":"Callback implementation for Ecto.Repo.in_transaction?/0 .","ref":"GitGud.DB.html#in_transaction?/0","title":"GitGud.DB.in_transaction?/0","type":"function"},{"doc":"Dynamically loads the repository url from the DATABASE_URL environment variable.","ref":"GitGud.DB.html#init/2","title":"GitGud.DB.init/2","type":"function"},{"doc":"Callback implementation for Ecto.Repo.insert/2 .","ref":"GitGud.DB.html#insert/2","title":"GitGud.DB.insert/2","type":"function"},{"doc":"Callback implementation for Ecto.Repo.insert!/2 .","ref":"GitGud.DB.html#insert!/2","title":"GitGud.DB.insert!/2","type":"function"},{"doc":"Callback implementation for Ecto.Repo.insert_all/3 .","ref":"GitGud.DB.html#insert_all/3","title":"GitGud.DB.insert_all/3","type":"function"},{"doc":"Callback implementation for Ecto.Repo.insert_or_update/2 .","ref":"GitGud.DB.html#insert_or_update/2","title":"GitGud.DB.insert_or_update/2","type":"function"},{"doc":"Callback implementation for Ecto.Repo.insert_or_update!/2 .","ref":"GitGud.DB.html#insert_or_update!/2","title":"GitGud.DB.insert_or_update!/2","type":"function"},{"doc":"Callback implementation for Ecto.Repo.load/2 .","ref":"GitGud.DB.html#load/2","title":"GitGud.DB.load/2","type":"function"},{"doc":"Callback implementation for Ecto.Repo.one/2 .","ref":"GitGud.DB.html#one/2","title":"GitGud.DB.one/2","type":"function"},{"doc":"Callback implementation for Ecto.Repo.one!/2 .","ref":"GitGud.DB.html#one!/2","title":"GitGud.DB.one!/2","type":"function"},{"doc":"Callback implementation for Ecto.Repo.preload/3 .","ref":"GitGud.DB.html#preload/3","title":"GitGud.DB.preload/3","type":"function"},{"doc":"Callback implementation for Ecto.Repo.prepare_query/3 .","ref":"GitGud.DB.html#prepare_query/3","title":"GitGud.DB.prepare_query/3","type":"function"},{"doc":"Callback implementation for Ecto.Repo.put_dynamic_repo/1 .","ref":"GitGud.DB.html#put_dynamic_repo/1","title":"GitGud.DB.put_dynamic_repo/1","type":"function"},{"doc":"A convenience function for SQL-based repositories that executes the given query. See Ecto.Adapters.SQL.query/4 for more information.","ref":"GitGud.DB.html#query/3","title":"GitGud.DB.query/3","type":"function"},{"doc":"A convenience function for SQL-based repositories that executes the given query. See Ecto.Adapters.SQL.query!/4 for more information.","ref":"GitGud.DB.html#query!/3","title":"GitGud.DB.query!/3","type":"function"},{"doc":"Callback implementation for Ecto.Repo.reload/2 .","ref":"GitGud.DB.html#reload/2","title":"GitGud.DB.reload/2","type":"function"},{"doc":"Callback implementation for Ecto.Repo.reload!/2 .","ref":"GitGud.DB.html#reload!/2","title":"GitGud.DB.reload!/2","type":"function"},{"doc":"Callback implementation for Ecto.Repo.rollback/1 .","ref":"GitGud.DB.html#rollback/1","title":"GitGud.DB.rollback/1","type":"function"},{"doc":"Callback implementation for Ecto.Repo.start_link/1 .","ref":"GitGud.DB.html#start_link/1","title":"GitGud.DB.start_link/1","type":"function"},{"doc":"Callback implementation for Ecto.Repo.stop/1 .","ref":"GitGud.DB.html#stop/1","title":"GitGud.DB.stop/1","type":"function"},{"doc":"Callback implementation for Ecto.Repo.stream/2 .","ref":"GitGud.DB.html#stream/2","title":"GitGud.DB.stream/2","type":"function"},{"doc":"A convenience function for SQL-based repositories that translates the given query to SQL. See Ecto.Adapters.SQL.to_sql/3 for more information.","ref":"GitGud.DB.html#to_sql/2","title":"GitGud.DB.to_sql/2","type":"function"},{"doc":"Callback implementation for Ecto.Repo.transaction/2 .","ref":"GitGud.DB.html#transaction/2","title":"GitGud.DB.transaction/2","type":"function"},{"doc":"Callback implementation for Ecto.Repo.update/2 .","ref":"GitGud.DB.html#update/2","title":"GitGud.DB.update/2","type":"function"},{"doc":"Callback implementation for Ecto.Repo.update!/2 .","ref":"GitGud.DB.html#update!/2","title":"GitGud.DB.update!/2","type":"function"},{"doc":"Callback implementation for Ecto.Repo.update_all/3 .","ref":"GitGud.DB.html#update_all/3","title":"GitGud.DB.update_all/3","type":"function"},{"doc":"Behaviour for implementing generic queries.","ref":"GitGud.DBQueryable.html","title":"GitGud.DBQueryable","type":"behaviour"},{"doc":"Alters the given query .","ref":"GitGud.DBQueryable.html#c:alter_query/2","title":"GitGud.DBQueryable.alter_query/2","type":"callback"},{"doc":"Add preloads for the given query .","ref":"GitGud.DBQueryable.html#c:preload_query/3","title":"GitGud.DBQueryable.preload_query/3","type":"callback"},{"doc":"Returns a query for the given name and args .","ref":"GitGud.DBQueryable.html#c:query/2","title":"GitGud.DBQueryable.query/2","type":"callback"},{"doc":"Returns a query for the given queryable .","ref":"GitGud.DBQueryable.html#query/3","title":"GitGud.DBQueryable.query/3","type":"function"},{"doc":"Conveniences for executing DB release tasks when run in production without Mix installed.","ref":"GitGud.ReleaseTasks.html","title":"GitGud.ReleaseTasks","type":"module"},{"doc":"Runs all pending migrations.","ref":"GitGud.ReleaseTasks.html#migrate/0","title":"GitGud.ReleaseTasks.migrate/0","type":"function"},{"doc":"Reverts applied migrations down to and including version.","ref":"GitGud.ReleaseTasks.html#rollback/2","title":"GitGud.ReleaseTasks.rollback/2","type":"function"},{"doc":"Conveniences for authorization and resource loading.","ref":"GitGud.Authorization.html","title":"GitGud.Authorization","type":"module"},{"doc":"Returns true if user is allowed to perform action on resource ; otherwhise returns false .","ref":"GitGud.Authorization.html#authorized?/3","title":"GitGud.Authorization.authorized?/3","type":"function"},{"doc":"Enforces the authorization policy.","ref":"GitGud.Authorization.html#enforce_policy/3","title":"GitGud.Authorization.enforce_policy/3","type":"function"},{"doc":"Same as enforce_policy/3 but returns the resource or default if the policy cannot be enforced.","ref":"GitGud.Authorization.html#enforce_policy!/4","title":"GitGud.Authorization.enforce_policy!/4","type":"function"},{"doc":"Filters the given list of resources , i.e. returns only those for which authorized?/3 applies.","ref":"GitGud.Authorization.html#filter/3","title":"GitGud.Authorization.filter/3","type":"function"},{"doc":"Protocol for implementing resource authorization policies.","ref":"GitGud.AuthorizationPolicies.html","title":"GitGud.AuthorizationPolicies","type":"protocol"},{"doc":"Returns true if user is allowed to perform action on resource ; otherwhise returns false .","ref":"GitGud.AuthorizationPolicies.html#can?/3","title":"GitGud.AuthorizationPolicies.can?/3","type":"function"},{"doc":"","ref":"GitGud.AuthorizationPolicies.html#t:t/0","title":"GitGud.AuthorizationPolicies.t/0","type":"type"},{"doc":"Account schema and helper functions.","ref":"GitGud.Account.html","title":"GitGud.Account","type":"module"},{"doc":"Returns a changeset for the given params .","ref":"GitGud.Account.html#changeset/2","title":"GitGud.Account.changeset/2","type":"function"},{"doc":"Returns the matching user for the given credentials; elsewise returns nil . if user = GitGud.Account . check_credentials ( &quot;redrabbit&quot; , &quot;qwertz&quot; ) do IO . puts &quot;Welcome!&quot; else IO . puts &quot;Invalid login credentials.&quot; end","ref":"GitGud.Account.html#check_credentials/2","title":"GitGud.Account.check_credentials/2","type":"function"},{"doc":"Returns a changeset for the given OAuth2.0 params .","ref":"GitGud.Account.html#oauth2_changeset/2","title":"GitGud.Account.oauth2_changeset/2","type":"function"},{"doc":"Returns a changeset for the given password params .","ref":"GitGud.Account.html#password_changeset/2","title":"GitGud.Account.password_changeset/2","type":"function"},{"doc":"","ref":"GitGud.Account.html#t:t/0","title":"GitGud.Account.t/0","type":"type"},{"doc":"Comment schema and helper functions. A GitGud.Comment represents a comment in a discussion.","ref":"GitGud.Comment.html","title":"GitGud.Comment","type":"module"},{"doc":"Returns a changeset for the given params .","ref":"GitGud.Comment.html#changeset/2","title":"GitGud.Comment.changeset/2","type":"function"},{"doc":"Deletes the given comment . { :ok , comment } = GitGud.Comment . delete ( comment )","ref":"GitGud.Comment.html#delete/1","title":"GitGud.Comment.delete/1","type":"function"},{"doc":"Similar to delete!/1 , but raises an Ecto.InvalidChangesetError if an error occurs.","ref":"GitGud.Comment.html#delete!/1","title":"GitGud.Comment.delete!/1","type":"function"},{"doc":"Updates the given comment with the given params . { :ok , comment } = GitGud.Comment . update ( comment , body : &quot;This is the **new** comment message.&quot; ) This function validates the given params using changeset/2 .","ref":"GitGud.Comment.html#update/2","title":"GitGud.Comment.update/2","type":"function"},{"doc":"Updates the given comment with the given params and inserts a comment revision as well. { :ok , comment } = GitGud.Comment . update ( comment , author , body : &quot;This is the **new** comment message.&quot; ) This function validates the given params using changeset/2 .","ref":"GitGud.Comment.html#update/3","title":"GitGud.Comment.update/3","type":"function"},{"doc":"Similar to update/2 , but raises an Ecto.InvalidChangesetError if an error occurs.","ref":"GitGud.Comment.html#update!/2","title":"GitGud.Comment.update!/2","type":"function"},{"doc":"Similar to update/3 , but raises an Ecto.InvalidChangesetError if an error occurs.","ref":"GitGud.Comment.html#update!/3","title":"GitGud.Comment.update!/3","type":"function"},{"doc":"","ref":"GitGud.Comment.html#t:t/0","title":"GitGud.Comment.t/0","type":"type"},{"doc":"Conveniences for comment related queries.","ref":"GitGud.CommentQuery.html","title":"GitGud.CommentQuery","type":"module"},{"doc":"Returns a comment for the given id .","ref":"GitGud.CommentQuery.html#by_id/2","title":"GitGud.CommentQuery.by_id/2","type":"function"},{"doc":"Returns a list of permissions for the given comment and user .","ref":"GitGud.CommentQuery.html#permissions/3","title":"GitGud.CommentQuery.permissions/3","type":"function"},{"doc":"Returns a comment revision for the given id .","ref":"GitGud.CommentQuery.html#revision/2","title":"GitGud.CommentQuery.revision/2","type":"function"},{"doc":"Returns all the comment revision for the given comment .","ref":"GitGud.CommentQuery.html#revisions/2","title":"GitGud.CommentQuery.revisions/2","type":"function"},{"doc":"Returns the thread associated to the given comment .","ref":"GitGud.CommentQuery.html#thread/2","title":"GitGud.CommentQuery.thread/2","type":"function"},{"doc":"Comment revision schema for keeping track of comment updates.","ref":"GitGud.CommentRevision.html","title":"GitGud.CommentRevision","type":"module"},{"doc":"","ref":"GitGud.CommentRevision.html#t:t/0","title":"GitGud.CommentRevision.t/0","type":"type"},{"doc":"Git commit review schema and helper functions. A GitGud.CommitLineReview represents a comment and it's replies for a given commit line.","ref":"GitGud.CommitLineReview.html","title":"GitGud.CommitLineReview","type":"module"},{"doc":"Adds a new comment. { :ok , comment } = GitGud.CommitLineReview . add_comment ( line_review , author , &quot;This is the **new** comment message.&quot; ) This function validates the given parameters using changeset/2 and GitGud.Comment.changeset/2 .","ref":"GitGud.CommitLineReview.html#add_comment/4","title":"GitGud.CommitLineReview.add_comment/4","type":"function"},{"doc":"Adds a new comment. { :ok , comment } = GitGud.CommitLineReview . add_comment ( repo , commit_oid , blob_oid , hunk , line , author , &quot;This is the **new** comment message.&quot; ) This function validates the given parameters using changeset/2 and GitGud.Comment.changeset/2 .","ref":"GitGud.CommitLineReview.html#add_comment/8","title":"GitGud.CommitLineReview.add_comment/8","type":"function"},{"doc":"Similar to add_comment/4 , but raises an Ecto.InvalidChangesetError if an error occurs.","ref":"GitGud.CommitLineReview.html#add_comment!/4","title":"GitGud.CommitLineReview.add_comment!/4","type":"function"},{"doc":"Similar to add_comment/8 , but raises an Ecto.InvalidChangesetError if an error occurs.","ref":"GitGud.CommitLineReview.html#add_comment!/8","title":"GitGud.CommitLineReview.add_comment!/8","type":"function"},{"doc":"Returns a changeset for the given params .","ref":"GitGud.CommitLineReview.html#changeset/2","title":"GitGud.CommitLineReview.changeset/2","type":"function"},{"doc":"","ref":"GitGud.CommitLineReview.html#t:t/0","title":"GitGud.CommitLineReview.t/0","type":"type"},{"doc":"Email schema and helper functions. A GitGud.Email is used for different tasks such as user authentication &amp; verification, notifications, identification of Git commit authors &amp; commiters, etc.","ref":"GitGud.Email.html","title":"GitGud.Email","type":"module"},{"doc":"Returns a changeset for the given params .","ref":"GitGud.Email.html#changeset/2","title":"GitGud.Email.changeset/2","type":"function"},{"doc":"Creates a new email with the given params . { :ok , email } = GitGud.Email . create ( user , address : &quot;m.flach@almightycouch.com&quot; ) This function validates the given params using changeset/2 .","ref":"GitGud.Email.html#create/2","title":"GitGud.Email.create/2","type":"function"},{"doc":"Similar to create/1 , but raises an Ecto.InvalidChangesetError if an error occurs.","ref":"GitGud.Email.html#create!/2","title":"GitGud.Email.create!/2","type":"function"},{"doc":"Deletes the given email . { :ok , email } = GitGud.Email . delete ( email )","ref":"GitGud.Email.html#delete/1","title":"GitGud.Email.delete/1","type":"function"},{"doc":"Similar to delete!/1 , but raises an Ecto.InvalidChangesetError if an error occurs.","ref":"GitGud.Email.html#delete!/1","title":"GitGud.Email.delete!/1","type":"function"},{"doc":"Returns a changeset for verifying the given email .","ref":"GitGud.Email.html#verification_changeset/1","title":"GitGud.Email.verification_changeset/1","type":"function"},{"doc":"Verifies the given email . { :ok , email } = GitGud.Email . verify ( email ) This function verifies the given email and ensures that the associated user is updated accordingly.","ref":"GitGud.Email.html#verify/1","title":"GitGud.Email.verify/1","type":"function"},{"doc":"Similar to verify/1 , but raises an Ecto.InvalidChangesetError if an error occurs.","ref":"GitGud.Email.html#verify!/1","title":"GitGud.Email.verify!/1","type":"function"},{"doc":"","ref":"GitGud.Email.html#t:t/0","title":"GitGud.Email.t/0","type":"type"},{"doc":"GNU Privacy Guard (GPG) key schema and helper functions.","ref":"GitGud.GPGKey.html","title":"GitGud.GPGKey","type":"module"},{"doc":"Returns a changeset for the given params .","ref":"GitGud.GPGKey.html#changeset/2","title":"GitGud.GPGKey.changeset/2","type":"function"},{"doc":"Creates a new SSH key with the given params . { :ok , gpg_key } = GitGud.GPGKey . create ( user , data : &quot;...&quot; ) This function validates the given params using changeset/2 .","ref":"GitGud.GPGKey.html#create/2","title":"GitGud.GPGKey.create/2","type":"function"},{"doc":"Similar to create/2 , but raises an Ecto.InvalidChangesetError if an error occurs.","ref":"GitGud.GPGKey.html#create!/2","title":"GitGud.GPGKey.create!/2","type":"function"},{"doc":"Decodes the given ASCII armor message .","ref":"GitGud.GPGKey.html#decode!/1","title":"GitGud.GPGKey.decode!/1","type":"function"},{"doc":"Deletes the given gpg_key . { :ok , gpg_key } = GitGud.GPGKey . delete ( gpg_key )","ref":"GitGud.GPGKey.html#delete/1","title":"GitGud.GPGKey.delete/1","type":"function"},{"doc":"Similar to delete!/1 , but raises an Ecto.InvalidChangesetError if an error occurs.","ref":"GitGud.GPGKey.html#delete!/1","title":"GitGud.GPGKey.delete!/1","type":"function"},{"doc":"Parses the given GPG key data .","ref":"GitGud.GPGKey.html#parse!/1","title":"GitGud.GPGKey.parse!/1","type":"function"},{"doc":"","ref":"GitGud.GPGKey.html#t:t/0","title":"GitGud.GPGKey.t/0","type":"type"},{"doc":"Conveniences for GPG key related queries.","ref":"GitGud.GPGKeyQuery.html","title":"GitGud.GPGKeyQuery","type":"module"},{"doc":"Returns a GPG key for the given id .","ref":"GitGud.GPGKeyQuery.html#by_id/2","title":"GitGud.GPGKeyQuery.by_id/2","type":"function"},{"doc":"Returns a GPG key for the given key_id . Note that this function support 32 bit and 64 bit key ids.","ref":"GitGud.GPGKeyQuery.html#by_key_id/2","title":"GitGud.GPGKeyQuery.by_key_id/2","type":"function"},{"doc":"Issue schema and helper functions.","ref":"GitGud.Issue.html","title":"GitGud.Issue","type":"module"},{"doc":"Adds a new comment. { :ok , comment } = GitGud.Issue . add_comment ( issue , author , &quot;This is the **new** comment message.&quot; ) This function validates the given parameters using GitGud.Comment.changeset/2 .","ref":"GitGud.Issue.html#add_comment/3","title":"GitGud.Issue.add_comment/3","type":"function"},{"doc":"Returns a changeset for the given params .","ref":"GitGud.Issue.html#changeset/2","title":"GitGud.Issue.changeset/2","type":"function"},{"doc":"Closes the given issue . { :ok , comment } = GitGud.Issue . close ( issue )","ref":"GitGud.Issue.html#close/2","title":"GitGud.Issue.close/2","type":"function"},{"doc":"Similar to close/1 , but raises an Ecto.InvalidChangesetError if an error occurs.","ref":"GitGud.Issue.html#close!/2","title":"GitGud.Issue.close!/2","type":"function"},{"doc":"Creates a new issue with the given params . { :ok , issue } = GitGud.Issue . create ( repo , author , title : &quot;Help me!&quot; , comment : %{ body : &quot;I really need help.&quot; } ) This function validates the given params using changeset/2 .","ref":"GitGud.Issue.html#create/3","title":"GitGud.Issue.create/3","type":"function"},{"doc":"Similar to create/1 , but raises an Ecto.InvalidChangesetError if an error occurs.","ref":"GitGud.Issue.html#create!/3","title":"GitGud.Issue.create!/3","type":"function"},{"doc":"Reopens the given issue . { :ok , comment } = GitGud.Issue . reopen ( issue )","ref":"GitGud.Issue.html#reopen/2","title":"GitGud.Issue.reopen/2","type":"function"},{"doc":"Similar to reopen/1 , but raises an Ecto.InvalidChangesetError if an error occurs.","ref":"GitGud.Issue.html#reopen!/2","title":"GitGud.Issue.reopen!/2","type":"function"},{"doc":"Updates the labels of the given issue . { :ok , comment } = GitGud.Issue . update_labels ( issue , { labels_push , labels_pull } )","ref":"GitGud.Issue.html#update_labels/3","title":"GitGud.Issue.update_labels/3","type":"function"},{"doc":"Similar to update_labels/2 , but raises an Ecto.InvalidChangesetError if an error occurs.","ref":"GitGud.Issue.html#update_labels!/3","title":"GitGud.Issue.update_labels!/3","type":"function"},{"doc":"Updates the title of the given issue . { :ok , comment } = GitGud.Issue . update_title ( issue , &quot;This is the new title&quot; )","ref":"GitGud.Issue.html#update_title/3","title":"GitGud.Issue.update_title/3","type":"function"},{"doc":"Similar to update_title/2 , but raises an Ecto.InvalidChangesetError if an error occurs.","ref":"GitGud.Issue.html#update_title!/3","title":"GitGud.Issue.update_title!/3","type":"function"},{"doc":"","ref":"GitGud.Issue.html#t:t/0","title":"GitGud.Issue.t/0","type":"type"},{"doc":"Issue label schema and helper functions.","ref":"GitGud.IssueLabel.html","title":"GitGud.IssueLabel","type":"module"},{"doc":"Returns a changeset for the given params .","ref":"GitGud.IssueLabel.html#changeset/2","title":"GitGud.IssueLabel.changeset/2","type":"function"},{"doc":"","ref":"GitGud.IssueLabel.html#t:t/0","title":"GitGud.IssueLabel.t/0","type":"type"},{"doc":"Conveniences for issue related queries.","ref":"GitGud.IssueQuery.html","title":"GitGud.IssueQuery","type":"module"},{"doc":"Returns a repository issue for the given id .","ref":"GitGud.IssueQuery.html#by_id/2","title":"GitGud.IssueQuery.by_id/2","type":"function"},{"doc":"Returns the number of issues for the given repo .","ref":"GitGud.IssueQuery.html#count_repo_issues/2","title":"GitGud.IssueQuery.count_repo_issues/2","type":"function"},{"doc":"Returns the number of issues grouped by status for the given repo .","ref":"GitGud.IssueQuery.html#count_repo_issues_by_status/2","title":"GitGud.IssueQuery.count_repo_issues_by_status/2","type":"function"},{"doc":"Returns a list of permissions for the given issue and user .","ref":"GitGud.IssueQuery.html#permissions/3","title":"GitGud.IssueQuery.permissions/3","type":"function"},{"doc":"Returns a repository issue for the given number .","ref":"GitGud.IssueQuery.html#repo_issue/3","title":"GitGud.IssueQuery.repo_issue/3","type":"function"},{"doc":"Returns all issues for the given repo .","ref":"GitGud.IssueQuery.html#repo_issues/2","title":"GitGud.IssueQuery.repo_issues/2","type":"function"},{"doc":"Returns all issues with number of replies for the given repo .","ref":"GitGud.IssueQuery.html#repo_issues_with_reply_count/2","title":"GitGud.IssueQuery.repo_issues_with_reply_count/2","type":"function"},{"doc":"Repository maintainer schema and helper functions. A GitGud.Maintainer is used to grant GitGud.Repo permissions to a given GitGud.User . Each repository maintainer also has a permission defining which actions he is able to perform on the repository. Following permissions are available: :read -- can read and clone the repository. :write -- can read, clone and push to the repository. :admin -- can read, clone, push and administrate the repository. By default, a newly created repository maintainer has :read permission.","ref":"GitGud.Maintainer.html","title":"GitGud.Maintainer","type":"module"},{"doc":"Returns a changeset for the given params .","ref":"GitGud.Maintainer.html#changeset/2","title":"GitGud.Maintainer.changeset/2","type":"function"},{"doc":"Deletes the given maintainer . { :ok , maintainer } = GitGud.Maintainer . delete ( maintainer )","ref":"GitGud.Maintainer.html#delete/1","title":"GitGud.Maintainer.delete/1","type":"function"},{"doc":"Similar to delete!/1 , but raises an Ecto.InvalidChangesetError if an error occurs.","ref":"GitGud.Maintainer.html#delete!/1","title":"GitGud.Maintainer.delete!/1","type":"function"},{"doc":"Updates the permission of the given maintainer . { :ok , maintainer } = GitGud.Maintainer . update_permission ( maintainer , :write ) This function validates the given permission using changeset/2 .","ref":"GitGud.Maintainer.html#update_permission/2","title":"GitGud.Maintainer.update_permission/2","type":"function"},{"doc":"Updates the permission of the given user for the given repo . { :ok , maintainer } = GitGud.Maintainer . update_permission ( repo , user , :write ) This function validates the given permission using changeset/2 .","ref":"GitGud.Maintainer.html#update_permission/3","title":"GitGud.Maintainer.update_permission/3","type":"function"},{"doc":"Similar to update_permission/2 , but raises an Ecto.InvalidChangesetError if an error occurs.","ref":"GitGud.Maintainer.html#update_permission!/2","title":"GitGud.Maintainer.update_permission!/2","type":"function"},{"doc":"Similar to update_permission/3 , but raises an Ecto.NoResultsError if an error occurs.","ref":"GitGud.Maintainer.html#update_permission!/3","title":"GitGud.Maintainer.update_permission!/3","type":"function"},{"doc":"","ref":"GitGud.Maintainer.html#t:t/0","title":"GitGud.Maintainer.t/0","type":"type"},{"doc":"Repository schema and helper functions. A repository contains the content for a project.","ref":"GitGud.Repo.html","title":"GitGud.Repo","type":"module"},{"doc":"Adds a new maintainer to the given repo . { :ok , maintainer } = GitGud.Repo . add_maintainer ( repo , user_id : user . id , permissions : &quot;write&quot; ) This function validates the given params using GitGud.Maintainer.changeset/2 .","ref":"GitGud.Repo.html#add_maintainer/2","title":"GitGud.Repo.add_maintainer/2","type":"function"},{"doc":"Similar to add_maintainer/2 , but raises an Ecto.InvalidChangesetError if an error occurs.","ref":"GitGud.Repo.html#add_maintainer!/2","title":"GitGud.Repo.add_maintainer!/2","type":"function"},{"doc":"Returns a changeset for the given params .","ref":"GitGud.Repo.html#changeset/2","title":"GitGud.Repo.changeset/2","type":"function"},{"doc":"Creates and initialize a new repository. { :ok , repo } = GitGud.Repo . create ( user , name : &quot;gitgud&quot; , description : &quot;GitHub clone entirely written in Elixir.&quot; , public : true ) This function validates the given params using changeset/2 . By default a bare Git repository will be initialized (see GitGud.RepoStorage.init/2 ). If you prefer to create a non-bare repository, you can set the :bare option to false .","ref":"GitGud.Repo.html#create/3","title":"GitGud.Repo.create/3","type":"function"},{"doc":"Similar to create/2 , but raises an Ecto.InvalidChangesetError if an error occurs.","ref":"GitGud.Repo.html#create!/3","title":"GitGud.Repo.create!/3","type":"function"},{"doc":"Deletes the given repo . { :ok , repo } = GitGud.Repo . delete ( repo ) Repository associations (maintainers, issues, etc.) and related Git data will automatically be deleted.","ref":"GitGud.Repo.html#delete/1","title":"GitGud.Repo.delete/1","type":"function"},{"doc":"Similar to delete!/1 , but raises an Ecto.InvalidChangesetError if an error occurs.","ref":"GitGud.Repo.html#delete!/1","title":"GitGud.Repo.delete!/1","type":"function"},{"doc":"Returns a changeset for manipulating all associated issue labels at once.","ref":"GitGud.Repo.html#issue_labels_changeset/2","title":"GitGud.Repo.issue_labels_changeset/2","type":"function"},{"doc":"Updates the given repo with the given params . { :ok , repo } = GitGud.Repo . update ( repo , description : &quot;Host open-source project without hassle.&quot; ) This function validates the given params using changeset/2 .","ref":"GitGud.Repo.html#update/2","title":"GitGud.Repo.update/2","type":"function"},{"doc":"Similar to update/2 , but raises an Ecto.InvalidChangesetError if an error occurs.","ref":"GitGud.Repo.html#update!/2","title":"GitGud.Repo.update!/2","type":"function"},{"doc":"Updates the associated issues labels for the given repo with the given params . { :ok , repo } = GitGud.Repo . update_issue_labels ( repo , issue_labels_params ) This function validates the given params using issue_labels_changeset/2 .","ref":"GitGud.Repo.html#update_issue_labels/2","title":"GitGud.Repo.update_issue_labels/2","type":"function"},{"doc":"Similar to update_issue_labels/2 , but raises an Ecto.InvalidChangesetError if an error occurs.","ref":"GitGud.Repo.html#update_issue_labels!/2","title":"GitGud.Repo.update_issue_labels!/2","type":"function"},{"doc":"","ref":"GitGud.Repo.html#t:t/0","title":"GitGud.Repo.t/0","type":"type"},{"doc":"Conveniences for repository related queries.","ref":"GitGud.RepoQuery.html","title":"GitGud.RepoQuery","type":"module"},{"doc":"Returns a repository for the given id .","ref":"GitGud.RepoQuery.html#by_id/2","title":"GitGud.RepoQuery.by_id/2","type":"function"},{"doc":"Returns a repository for the given path .","ref":"GitGud.RepoQuery.html#by_path/2","title":"GitGud.RepoQuery.by_path/2","type":"function"},{"doc":"Returns the number of contributors for the given repo .","ref":"GitGud.RepoQuery.html#count_contributors/1","title":"GitGud.RepoQuery.count_contributors/1","type":"function"},{"doc":"Returns a list of associated GitGud.IssueLabel for the given repo .","ref":"GitGud.RepoQuery.html#issue_labels/2","title":"GitGud.RepoQuery.issue_labels/2","type":"function"},{"doc":"Returns a single GitGud.Maintainer for the given repo and user .","ref":"GitGud.RepoQuery.html#maintainer/2","title":"GitGud.RepoQuery.maintainer/2","type":"function"},{"doc":"Returns a list of associated GitGud.Maintainer for the given repo .","ref":"GitGud.RepoQuery.html#maintainers/1","title":"GitGud.RepoQuery.maintainers/1","type":"function"},{"doc":"Returns a list of permissions for the given repo and user .","ref":"GitGud.RepoQuery.html#permissions/2","title":"GitGud.RepoQuery.permissions/2","type":"function"},{"doc":"Returns a list of users matching the given input .","ref":"GitGud.RepoQuery.html#search/2","title":"GitGud.RepoQuery.search/2","type":"function"},{"doc":"Returns a single repository for the given user and name .","ref":"GitGud.RepoQuery.html#user_repo/3","title":"GitGud.RepoQuery.user_repo/3","type":"function"},{"doc":"Returns a list of repositories for the given user .","ref":"GitGud.RepoQuery.html#user_repos/2","title":"GitGud.RepoQuery.user_repos/2","type":"function"},{"doc":"","ref":"GitGud.RepoQuery.html#t:user_param/0","title":"GitGud.RepoQuery.user_param/0","type":"type"},{"doc":"Conveniences for review related queries.","ref":"GitGud.ReviewQuery.html","title":"GitGud.ReviewQuery","type":"module"},{"doc":"Returns a commit line review for the given id .","ref":"GitGud.ReviewQuery.html#commit_line_review/2","title":"GitGud.ReviewQuery.commit_line_review/2","type":"function"},{"doc":"Returns a commit line review for the given repo , commit , blob_oid , hunk and line .","ref":"GitGud.ReviewQuery.html#commit_line_review/6","title":"GitGud.ReviewQuery.commit_line_review/6","type":"function"},{"doc":"Returns commit line reviews for the given repo and commit .","ref":"GitGud.ReviewQuery.html#commit_line_reviews/3","title":"GitGud.ReviewQuery.commit_line_reviews/3","type":"function"},{"doc":"Returns comments for the given repo and commit .","ref":"GitGud.ReviewQuery.html#commit_line_reviews_comments/3","title":"GitGud.ReviewQuery.commit_line_reviews_comments/3","type":"function"},{"doc":"Returns the number of comments for the given repo and commit .","ref":"GitGud.ReviewQuery.html#count_comments/2","title":"GitGud.ReviewQuery.count_comments/2","type":"function"},{"doc":"Returns the number of of comments grouped by blob oid for the given repo and commit .","ref":"GitGud.ReviewQuery.html#count_comments_by_blob/2","title":"GitGud.ReviewQuery.count_comments_by_blob/2","type":"function"},{"doc":"Secure Shell (SSH) authentication key schema and helper functions. A GitGud.SSHKey is used essentially to authenticate SSH users via Public Key Authentication .","ref":"GitGud.SSHKey.html","title":"GitGud.SSHKey","type":"module"},{"doc":"Returns a changeset for the given key params . If :name is omitted and the given public key contains a comment, the comment will be used as :name . This function computes (see :public_key.ssh_decode/2 and :public_key.ssh_hostkey_fingerprint/1 ) and stores a fingerprint of the public key. It does not save the given :data into the database.","ref":"GitGud.SSHKey.html#changeset/2","title":"GitGud.SSHKey.changeset/2","type":"function"},{"doc":"Creates a new SSH key with the given params . { :ok , ssh_key } = GitGud.SSHKey . create ( user , name : &quot;My SSH Key&quot; , data : &quot;ssh-rsa AAAAB3NzaC1yc2...&quot; ) This function validates the given params using changeset/2 .","ref":"GitGud.SSHKey.html#create/2","title":"GitGud.SSHKey.create/2","type":"function"},{"doc":"Similar to create/2 , but raises an Ecto.InvalidChangesetError if an error occurs.","ref":"GitGud.SSHKey.html#create!/2","title":"GitGud.SSHKey.create!/2","type":"function"},{"doc":"Deletes the given ssh_key . { :ok , ssh_key } = GitGud.SSHKey . delete ( ssh_key )","ref":"GitGud.SSHKey.html#delete/1","title":"GitGud.SSHKey.delete/1","type":"function"},{"doc":"Similar to delete!/1 , but raises an Ecto.InvalidChangesetError if an error occurs.","ref":"GitGud.SSHKey.html#delete!/1","title":"GitGud.SSHKey.delete!/1","type":"function"},{"doc":"Updates the timestamp for the the given ssh_key . { :ok , ssh_key } = GitGud.SSHKey . update_timestamp ( ssh_key )","ref":"GitGud.SSHKey.html#update_timestamp/1","title":"GitGud.SSHKey.update_timestamp/1","type":"function"},{"doc":"Similar to update_timestamp/1 , but raises an Ecto.InvalidChangesetError if an error occurs.","ref":"GitGud.SSHKey.html#update_timestamp!/1","title":"GitGud.SSHKey.update_timestamp!/1","type":"function"},{"doc":"","ref":"GitGud.SSHKey.html#t:t/0","title":"GitGud.SSHKey.t/0","type":"type"},{"doc":"User account schema and helper functions. A user is an individual's account that owns repositories and can make new content.","ref":"GitGud.User.html","title":"GitGud.User","type":"module"},{"doc":"Creates a new user with the given params . { :ok , user } = GitGud.User . create ( login : &quot;redrabbit&quot; , name : &quot;Mario Flach&quot; , emails : [ %{ address : &quot;m.flach@almightycouch.com&quot; } ] , account : %{ password : &quot;qwertz&quot; } ) This function validates the given params using registration_changeset/2 .","ref":"GitGud.User.html#create/1","title":"GitGud.User.create/1","type":"function"},{"doc":"Similar to create/1 , but raises an Ecto.InvalidChangesetError if an error occurs.","ref":"GitGud.User.html#create!/1","title":"GitGud.User.create!/1","type":"function"},{"doc":"Deletes the given user . { :ok , user } = GitGud.User . delete ( user ) User associations (repositories, comments, etc.) will automatically be deleted.","ref":"GitGud.User.html#delete/1","title":"GitGud.User.delete/1","type":"function"},{"doc":"Similar to delete!/1 , but raises an Ecto.InvalidChangesetError if an error occurs.","ref":"GitGud.User.html#delete!/1","title":"GitGud.User.delete!/1","type":"function"},{"doc":"Returns a changeset for the given email .","ref":"GitGud.User.html#email_changeset/3","title":"GitGud.User.email_changeset/3","type":"function"},{"doc":"Returns a changeset for the given OAuth2.0 params . See GitGud.Account.oauth2_changeset/2 for more details.","ref":"GitGud.User.html#oauth2_changeset/2","title":"GitGud.User.oauth2_changeset/2","type":"function"},{"doc":"Returns a changeset for the given password params . See GitGud.Account.password_changeset/2 for more details.","ref":"GitGud.User.html#password_changeset/2","title":"GitGud.User.password_changeset/2","type":"function"},{"doc":"Returns a changeset for the given profile params .","ref":"GitGud.User.html#profile_changeset/2","title":"GitGud.User.profile_changeset/2","type":"function"},{"doc":"Returns a changeset for the given registration params .","ref":"GitGud.User.html#registration_changeset/2","title":"GitGud.User.registration_changeset/2","type":"function"},{"doc":"Updates the given user with the given changeset_type and params . { :ok , user } = GitGud.User . update ( user , :profile , name : &quot;Mario Bros&quot; ) Following changeset types are available: :profile -- see profile_changeset/2 . :password -- see password_changeset/2 . :oauth2 -- see oauth2_changeset/2 . This function can also be used to update email associations, for example: { :ok , user } = GitGud.User . update ( user , :primary_email , email )","ref":"GitGud.User.html#update/3","title":"GitGud.User.update/3","type":"function"},{"doc":"Similar to update/3 , but raises an Ecto.InvalidChangesetError if an error occurs.","ref":"GitGud.User.html#update!/3","title":"GitGud.User.update!/3","type":"function"},{"doc":"Returns true is user is verified; otherwise returns false .","ref":"GitGud.User.html#verified?/1","title":"GitGud.User.verified?/1","type":"function"},{"doc":"","ref":"GitGud.User.html#t:t/0","title":"GitGud.User.t/0","type":"type"},{"doc":"Conveniences for user related queries.","ref":"GitGud.UserQuery.html","title":"GitGud.UserQuery","type":"module"},{"doc":"Returns a user for the given email .","ref":"GitGud.UserQuery.html#by_email/2","title":"GitGud.UserQuery.by_email/2","type":"function"},{"doc":"Returns a user for the given id .","ref":"GitGud.UserQuery.html#by_id/2","title":"GitGud.UserQuery.by_id/2","type":"function"},{"doc":"Returns a user for the given login .","ref":"GitGud.UserQuery.html#by_login/2","title":"GitGud.UserQuery.by_login/2","type":"function"},{"doc":"Returns a user for the given authentication provider and id .","ref":"GitGud.UserQuery.html#by_oauth/3","title":"GitGud.UserQuery.by_oauth/3","type":"function"},{"doc":"Returns a user for the given SSH key fingerprint .","ref":"GitGud.UserQuery.html#by_ssh_key/2","title":"GitGud.UserQuery.by_ssh_key/2","type":"function"},{"doc":"Returns a list of users matching the given input .","ref":"GitGud.UserQuery.html#search/2","title":"GitGud.UserQuery.search/2","type":"function"},{"doc":"Dynamic pool of Git repository agent processes.","ref":"GitGud.RepoPool.html","title":"GitGud.RepoPool","type":"module"},{"doc":"Returns a GitRekt.GitAgent process for the given repo .","ref":"GitGud.RepoPool.html#checkout/1","title":"GitGud.RepoPool.checkout/1","type":"function"},{"doc":"Similar to checkout/1 , but also monitors the agent process.","ref":"GitGud.RepoPool.html#checkout_monitor/1","title":"GitGud.RepoPool.checkout_monitor/1","type":"function"},{"doc":"Returns a specification to start this module under a supervisor. See Supervisor .","ref":"GitGud.RepoPool.html#child_spec/1","title":"GitGud.RepoPool.child_spec/1","type":"function"},{"doc":"Starts the pool as part of a supervision tree.","ref":"GitGud.RepoPool.html#start_link/2","title":"GitGud.RepoPool.start_link/2","type":"function"},{"doc":"Starts a dedicated supervisor for the given repo .","ref":"GitGud.RepoPool.html#start_pool/2","title":"GitGud.RepoPool.start_pool/2","type":"function"},{"doc":"Conveniences for storing Git objects and meta objects.","ref":"GitGud.RepoStorage.html","title":"GitGud.RepoStorage","type":"module"},{"doc":"Returns a specification to start this module under a supervisor. See Supervisor .","ref":"GitGud.RepoStorage.html#child_spec/1","title":"GitGud.RepoStorage.child_spec/1","type":"function"},{"doc":"Removes Git objects and references associated to the given repo .","ref":"GitGud.RepoStorage.html#cleanup/1","title":"GitGud.RepoStorage.cleanup/1","type":"function"},{"doc":"Ensures the associated volume is tagged.","ref":"GitGud.RepoStorage.html#ensure_volume_tagged/0","title":"GitGud.RepoStorage.ensure_volume_tagged/0","type":"function"},{"doc":"Initializes a new Git repository for the given repo .","ref":"GitGud.RepoStorage.html#init/2","title":"GitGud.RepoStorage.init/2","type":"function"},{"doc":"Updates the workdir for the given repo .","ref":"GitGud.RepoStorage.html#rename/2","title":"GitGud.RepoStorage.rename/2","type":"function"},{"doc":"Starts the storage server as part of a supervision tree.","ref":"GitGud.RepoStorage.html#start_link/2","title":"GitGud.RepoStorage.start_link/2","type":"function"},{"doc":"Returns the VOLUME identifier.","ref":"GitGud.RepoStorage.html#volume/0","title":"GitGud.RepoStorage.volume/0","type":"function"},{"doc":"Returns the absolute path to the Git workdir for the given repo . The path is a concatenation of the Git root path, repo.owner_login and repo.name .","ref":"GitGud.RepoStorage.html#workdir/1","title":"GitGud.RepoStorage.workdir/1","type":"function"},{"doc":"Supervisor for dealing with repository processes.","ref":"GitGud.RepoSupervisor.html","title":"GitGud.RepoSupervisor","type":"module"},{"doc":"Returns a specification to start this module under a supervisor. See Supervisor .","ref":"GitGud.RepoSupervisor.html#child_spec/1","title":"GitGud.RepoSupervisor.child_spec/1","type":"function"},{"doc":"Registers the current process and volume with an unique name.","ref":"GitGud.RepoSupervisor.html#register_volume/2","title":"GitGud.RepoSupervisor.register_volume/2","type":"function"},{"doc":"Starts the supervisor as part of a supervision tree.","ref":"GitGud.RepoSupervisor.html#start_link/1","title":"GitGud.RepoSupervisor.start_link/1","type":"function"},{"doc":"Returns a process name for a given module and volume.","ref":"GitGud.RepoSupervisor.html#volume_name/2","title":"GitGud.RepoSupervisor.volume_name/2","type":"function"},{"doc":"Secure Shell (SSH) server providing support for Git server commands. The server handles following Git commands: git-receive-pack - corresponding server-side command to git push . git-upload-pack - corresponding server-side command to git fetch . Example To process Git commands over SSH, simply start the server as part of your supervision tree: children = [ Git.SSHServer ] Supervisor . start_link ( children , strategy : :one_for_one ) Authentication A registered GitGud.User must authenticate with one of following methods: public-key - if any of the associated GitGud.SSHKey matches. password - if the given credentials are correct. interactive - interactive login prompt allowing several tries. See GitGud.Authorization for more details.","ref":"GitGud.SSHServer.html","title":"GitGud.SSHServer","type":"module"},{"doc":"Returns a child-spec to use as part of a supervision tree.","ref":"GitGud.SSHServer.html#child_spec/1","title":"GitGud.SSHServer.child_spec/1","type":"function"},{"doc":"","ref":"GitGud.SSHServer.html#t:t/0","title":"GitGud.SSHServer.t/0","type":"type"},{"doc":"Plug providing support for Git server commands over HTTP. This plug handles following Git commands: git-receive-pack - corresponding server-side command to git push . git-upload-pack - corresponding server-side command to git fetch . Example Here is an example of GitGud.SmartHTTPBackend used in a Plug.Router to handle Git server commands: defmodule SmartHTTPBackendRouter do use Plug.Router plug :match plug :fetch_query_params plug :dispatch get &quot;/:user_login/:repo_name/info/refs&quot; , to : GitGud.SmartHTTPBackend , init_opts : :discover post &quot;/:user_login/:repo_name/git-receive-pack&quot; , to : GitGud.SmartHTTPBackend , init_opts : :receive_pack post &quot;/:user_login/:repo_name/git-upload-pack&quot; , to : GitGud.SmartHTTPBackend , init_opts : :upload_pack end Note that user_login and repo_name path parameters are mandatory. To process Git commands over HTTP, simply start a Cowboy server as part of your supervision tree: children = [ { Plug.Cowboy , scheme : :http , plug : SmartHTTPBackendRouter } ] Supervisor . start_link ( children , strategy : :one_for_one ) Authentication A registered GitGud.User can authenticate over HTTP via Basic Authentication . This is required to execute commands with granted permissions (such as pushing commits and cloning private repos). See GitGud.Authorization for more details.","ref":"GitGud.SmartHTTPBackend.html","title":"GitGud.SmartHTTPBackend","type":"module"},{"doc":"Returns all references available for the given Git repository.","ref":"GitGud.SmartHTTPBackend.html#discover/2","title":"GitGud.SmartHTTPBackend.discover/2","type":"function"},{"doc":"Processes git-receive-pack requests.","ref":"GitGud.SmartHTTPBackend.html#receive_pack/2","title":"GitGud.SmartHTTPBackend.receive_pack/2","type":"function"},{"doc":"Processes git-upload-pack requests.","ref":"GitGud.SmartHTTPBackend.html#upload_pack/2","title":"GitGud.SmartHTTPBackend.upload_pack/2","type":"function"},{"doc":"OAuth2.0 provider schema and helper functions.","ref":"GitGud.OAuth2.Provider.html","title":"GitGud.OAuth2.Provider","type":"module"},{"doc":"Returns an authentication provider changeset for the given params .","ref":"GitGud.OAuth2.Provider.html#changeset/2","title":"GitGud.OAuth2.Provider.changeset/2","type":"function"},{"doc":"Creates a new OAuth2.0 provider with the given params . { :ok , provider } = GitGud.OAuth2.Provider . create ( account , provider : &quot;github&quot; , provider_id : 12345 , token : &quot;2c0d6d13ca2e34ac557e181373f120d15c4fdd21&quot; ) This function validates the given params using changeset/2 .","ref":"GitGud.OAuth2.Provider.html#create/2","title":"GitGud.OAuth2.Provider.create/2","type":"function"},{"doc":"Similar to create/2 , but raises an Ecto.InvalidChangesetError if an error occurs.","ref":"GitGud.OAuth2.Provider.html#create!/2","title":"GitGud.OAuth2.Provider.create!/2","type":"function"},{"doc":"Deletes the given OAuth2.0 provider .","ref":"GitGud.OAuth2.Provider.html#delete/1","title":"GitGud.OAuth2.Provider.delete/1","type":"function"},{"doc":"Similar to delete!/1 , but raises an Ecto.InvalidChangesetError if an error occurs.","ref":"GitGud.OAuth2.Provider.html#delete!/1","title":"GitGud.OAuth2.Provider.delete!/1","type":"function"},{"doc":"","ref":"GitGud.OAuth2.Provider.html#t:t/0","title":"GitGud.OAuth2.Provider.t/0","type":"type"},{"doc":"An OAuth2.0 authentication strategy for GitHub.","ref":"GitGud.OAuth2.GitHub.html","title":"GitGud.OAuth2.GitHub","type":"module"},{"doc":"Returns a new OAuth2.0 client.","ref":"GitGud.OAuth2.GitHub.html#new/0","title":"GitGud.OAuth2.GitHub.new/0","type":"function"},{"doc":"An OAuth2.0 authentication strategy for GitLab.","ref":"GitGud.OAuth2.GitLab.html","title":"GitGud.OAuth2.GitLab","type":"module"},{"doc":"Returns a new OAuth2.0 client.","ref":"GitGud.OAuth2.GitLab.html#new/0","title":"GitGud.OAuth2.GitLab.new/0","type":"function"},{"doc":"Module providing resolution functions for GraphQL related queries.","ref":"GitGud.GraphQL.Resolvers.html","title":"GitGud.GraphQL.Resolvers","type":"module"},{"doc":"Closes a repository issue.","ref":"GitGud.GraphQL.Resolvers.html#close_issue/2","title":"GitGud.GraphQL.Resolvers.close_issue/2","type":"function"},{"doc":"Resolves the author for a given comment .","ref":"GitGud.GraphQL.Resolvers.html#comment_author/3","title":"GitGud.GraphQL.Resolvers.comment_author/3","type":"function"},{"doc":"Resolves the HTML content of a given comment .","ref":"GitGud.GraphQL.Resolvers.html#comment_html/3","title":"GitGud.GraphQL.Resolvers.comment_html/3","type":"function"},{"doc":"Resolves the permissions for a given comment .","ref":"GitGud.GraphQL.Resolvers.html#comment_permissions/3","title":"GitGud.GraphQL.Resolvers.comment_permissions/3","type":"function"},{"doc":"Resolves the repository for a given comment .","ref":"GitGud.GraphQL.Resolvers.html#comment_repo/3","title":"GitGud.GraphQL.Resolvers.comment_repo/3","type":"function"},{"doc":"Resolves the author for a given comment revision .","ref":"GitGud.GraphQL.Resolvers.html#comment_revision_author/3","title":"GitGud.GraphQL.Resolvers.comment_revision_author/3","type":"function"},{"doc":"Resolves the HTML content of a given comment revision .","ref":"GitGud.GraphQL.Resolvers.html#comment_revision_html/3","title":"GitGud.GraphQL.Resolvers.comment_revision_html/3","type":"function"},{"doc":"Resolves revisions for a comment .","ref":"GitGud.GraphQL.Resolvers.html#comment_revisions/2","title":"GitGud.GraphQL.Resolvers.comment_revisions/2","type":"function"},{"doc":"Returns the search result type.","ref":"GitGud.GraphQL.Resolvers.html#comment_thread_type/2","title":"GitGud.GraphQL.Resolvers.comment_thread_type/2","type":"function"},{"doc":"Resolves the line review for a given Git commit object.","ref":"GitGud.GraphQL.Resolvers.html#commit_line_review/3","title":"GitGud.GraphQL.Resolvers.commit_line_review/3","type":"function"},{"doc":"Resolves comments for a commit line review.","ref":"GitGud.GraphQL.Resolvers.html#commit_line_review_comments/2","title":"GitGud.GraphQL.Resolvers.commit_line_review_comments/2","type":"function"},{"doc":"Resolves the repository for a given commit_line_review .","ref":"GitGud.GraphQL.Resolvers.html#commit_line_review_repo/3","title":"GitGud.GraphQL.Resolvers.commit_line_review_repo/3","type":"function"},{"doc":"Resolves the line reviews for a given Git commit object.","ref":"GitGud.GraphQL.Resolvers.html#commit_line_reviews/3","title":"GitGud.GraphQL.Resolvers.commit_line_reviews/3","type":"function"},{"doc":"Creates a Git line commit review comment.","ref":"GitGud.GraphQL.Resolvers.html#create_commit_line_review_comment/2","title":"GitGud.GraphQL.Resolvers.create_commit_line_review_comment/2","type":"function"},{"doc":"Creates a repository issue comment.","ref":"GitGud.GraphQL.Resolvers.html#create_issue_comment/2","title":"GitGud.GraphQL.Resolvers.create_issue_comment/2","type":"function"},{"doc":"Deletes a comment.","ref":"GitGud.GraphQL.Resolvers.html#delete_comment/2","title":"GitGud.GraphQL.Resolvers.delete_comment/2","type":"function"},{"doc":"Resolves the type for a given Git actor .","ref":"GitGud.GraphQL.Resolvers.html#git_actor_type/2","title":"GitGud.GraphQL.Resolvers.git_actor_type/2","type":"function"},{"doc":"Resolves the content length for a given Git blob object.","ref":"GitGud.GraphQL.Resolvers.html#git_blob_size/3","title":"GitGud.GraphQL.Resolvers.git_blob_size/3","type":"function"},{"doc":"Resolves the author for a given Git commit object.","ref":"GitGud.GraphQL.Resolvers.html#git_commit_author/3","title":"GitGud.GraphQL.Resolvers.git_commit_author/3","type":"function"},{"doc":"Resolves the committer for a given Git commit object.","ref":"GitGud.GraphQL.Resolvers.html#git_commit_committer/3","title":"GitGud.GraphQL.Resolvers.git_commit_committer/3","type":"function"},{"doc":"Resolves the message for a given Git commit object.","ref":"GitGud.GraphQL.Resolvers.html#git_commit_message/3","title":"GitGud.GraphQL.Resolvers.git_commit_message/3","type":"function"},{"doc":"Resolves the parents for a given Git commit object.","ref":"GitGud.GraphQL.Resolvers.html#git_commit_parents/2","title":"GitGud.GraphQL.Resolvers.git_commit_parents/2","type":"function"},{"doc":"Resolves the timestamp for a given Git commit object.","ref":"GitGud.GraphQL.Resolvers.html#git_commit_timestamp/3","title":"GitGud.GraphQL.Resolvers.git_commit_timestamp/3","type":"function"},{"doc":"Resolves the commit history starting from the given Git revision object.","ref":"GitGud.GraphQL.Resolvers.html#git_history/2","title":"GitGud.GraphQL.Resolvers.git_history/2","type":"function"},{"doc":"Resolves the type for a given Git object .","ref":"GitGud.GraphQL.Resolvers.html#git_object_type/2","title":"GitGud.GraphQL.Resolvers.git_object_type/2","type":"function"},{"doc":"Resolves the Git target for the given Git reference object.","ref":"GitGud.GraphQL.Resolvers.html#git_reference_target/3","title":"GitGud.GraphQL.Resolvers.git_reference_target/3","type":"function"},{"doc":"Resolves the type for a given Git tag .","ref":"GitGud.GraphQL.Resolvers.html#git_reference_type/3","title":"GitGud.GraphQL.Resolvers.git_reference_type/3","type":"function"},{"doc":"Resolves the author for a given Git tag object.","ref":"GitGud.GraphQL.Resolvers.html#git_tag_author/3","title":"GitGud.GraphQL.Resolvers.git_tag_author/3","type":"function"},{"doc":"Resolves the message for a given Git tag object.","ref":"GitGud.GraphQL.Resolvers.html#git_tag_message/3","title":"GitGud.GraphQL.Resolvers.git_tag_message/3","type":"function"},{"doc":"Resolves the Git target for the given Git tag object.","ref":"GitGud.GraphQL.Resolvers.html#git_tag_target/3","title":"GitGud.GraphQL.Resolvers.git_tag_target/3","type":"function"},{"doc":"Resolves the type for a given Git tag .","ref":"GitGud.GraphQL.Resolvers.html#git_tag_type/2","title":"GitGud.GraphQL.Resolvers.git_tag_type/2","type":"function"},{"doc":"Resolves the tree for a given Git commit object.","ref":"GitGud.GraphQL.Resolvers.html#git_tree/3","title":"GitGud.GraphQL.Resolvers.git_tree/3","type":"function"},{"doc":"Resolves the tree entries for a given Git tree object.","ref":"GitGud.GraphQL.Resolvers.html#git_tree_entries/2","title":"GitGud.GraphQL.Resolvers.git_tree_entries/2","type":"function"},{"doc":"Returns the underlying Git object for a given Git tree_entry object.","ref":"GitGud.GraphQL.Resolvers.html#git_tree_entry_target/3","title":"GitGud.GraphQL.Resolvers.git_tree_entry_target/3","type":"function"},{"doc":"Resolves the author for a given comment .","ref":"GitGud.GraphQL.Resolvers.html#issue_author/3","title":"GitGud.GraphQL.Resolvers.issue_author/3","type":"function"},{"doc":"Resolves the commit OID for a given issue event.","ref":"GitGud.GraphQL.Resolvers.html#issue_commit_reference_event_oid/3","title":"GitGud.GraphQL.Resolvers.issue_commit_reference_event_oid/3","type":"function"},{"doc":"Resolves the commit URL for a given issue event.","ref":"GitGud.GraphQL.Resolvers.html#issue_commit_reference_event_url/3","title":"GitGud.GraphQL.Resolvers.issue_commit_reference_event_url/3","type":"function"},{"doc":"Resolves the field of a given issue event .","ref":"GitGud.GraphQL.Resolvers.html#issue_event_field/4","title":"GitGud.GraphQL.Resolvers.issue_event_field/4","type":"function"},{"doc":"Resolves the timestamp for a given issue event .","ref":"GitGud.GraphQL.Resolvers.html#issue_event_timestamp/3","title":"GitGud.GraphQL.Resolvers.issue_event_timestamp/3","type":"function"},{"doc":"Resolves the type of a given issue event .","ref":"GitGud.GraphQL.Resolvers.html#issue_event_type/2","title":"GitGud.GraphQL.Resolvers.issue_event_type/2","type":"function"},{"doc":"Resolves the user for a given issue event .","ref":"GitGud.GraphQL.Resolvers.html#issue_event_user/3","title":"GitGud.GraphQL.Resolvers.issue_event_user/3","type":"function"},{"doc":"Resolves the pull labels ids for a given issue event.","ref":"GitGud.GraphQL.Resolvers.html#issue_labels_update_event_pull_labels/3","title":"GitGud.GraphQL.Resolvers.issue_labels_update_event_pull_labels/3","type":"function"},{"doc":"Resolves the push labels ids for a given issue event.","ref":"GitGud.GraphQL.Resolvers.html#issue_labels_update_event_push_labels/3","title":"GitGud.GraphQL.Resolvers.issue_labels_update_event_push_labels/3","type":"function"},{"doc":"Resolves the permissions for a given issue .","ref":"GitGud.GraphQL.Resolvers.html#issue_permissions/3","title":"GitGud.GraphQL.Resolvers.issue_permissions/3","type":"function"},{"doc":"Resolves replies for an issue .","ref":"GitGud.GraphQL.Resolvers.html#issue_replies/2","title":"GitGud.GraphQL.Resolvers.issue_replies/2","type":"function"},{"doc":"Resolves the repository for a given issue .","ref":"GitGud.GraphQL.Resolvers.html#issue_repo/3","title":"GitGud.GraphQL.Resolvers.issue_repo/3","type":"function"},{"doc":"Resolves a node object.","ref":"GitGud.GraphQL.Resolvers.html#node/3","title":"GitGud.GraphQL.Resolvers.node/3","type":"function"},{"doc":"Resolves a node object type.","ref":"GitGud.GraphQL.Resolvers.html#node_type/2","title":"GitGud.GraphQL.Resolvers.node_type/2","type":"function"},{"doc":"Reopens a repository issue.","ref":"GitGud.GraphQL.Resolvers.html#reopen_issue/2","title":"GitGud.GraphQL.Resolvers.reopen_issue/2","type":"function"},{"doc":"Resolves a repository object.","ref":"GitGud.GraphQL.Resolvers.html#repo/2","title":"GitGud.GraphQL.Resolvers.repo/2","type":"function"},{"doc":"Resolves the default branch object for a given repo .","ref":"GitGud.GraphQL.Resolvers.html#repo_head/3","title":"GitGud.GraphQL.Resolvers.repo_head/3","type":"function"},{"doc":"Resolves a single issue of a given repo .","ref":"GitGud.GraphQL.Resolvers.html#repo_issue/3","title":"GitGud.GraphQL.Resolvers.repo_issue/3","type":"function"},{"doc":"Resolvers the issue labels associated to a given repo .","ref":"GitGud.GraphQL.Resolvers.html#repo_issue_labels/3","title":"GitGud.GraphQL.Resolvers.repo_issue_labels/3","type":"function"},{"doc":"Resolves issues for a repository.","ref":"GitGud.GraphQL.Resolvers.html#repo_issues/2","title":"GitGud.GraphQL.Resolvers.repo_issues/2","type":"function"},{"doc":"Resolves a Git object by OID for a given repo .","ref":"GitGud.GraphQL.Resolvers.html#repo_object/3","title":"GitGud.GraphQL.Resolvers.repo_object/3","type":"function"},{"doc":"Resolves a Git reference object by name for a given repo .","ref":"GitGud.GraphQL.Resolvers.html#repo_ref/3","title":"GitGud.GraphQL.Resolvers.repo_ref/3","type":"function"},{"doc":"Resolves all Git reference objects for a given repo .","ref":"GitGud.GraphQL.Resolvers.html#repo_refs/2","title":"GitGud.GraphQL.Resolvers.repo_refs/2","type":"function"},{"doc":"Resolves a Git commit by revision spec for a given repo .","ref":"GitGud.GraphQL.Resolvers.html#repo_revision/3","title":"GitGud.GraphQL.Resolvers.repo_revision/3","type":"function"},{"doc":"Resolves a Git tag object by name for a given repo .","ref":"GitGud.GraphQL.Resolvers.html#repo_tag/3","title":"GitGud.GraphQL.Resolvers.repo_tag/3","type":"function"},{"doc":"Resolves all Git tag objects for a given repo .","ref":"GitGud.GraphQL.Resolvers.html#repo_tags/2","title":"GitGud.GraphQL.Resolvers.repo_tags/2","type":"function"},{"doc":"Resolves a list of users for a given search term.","ref":"GitGud.GraphQL.Resolvers.html#search/2","title":"GitGud.GraphQL.Resolvers.search/2","type":"function"},{"doc":"Returns the search result type.","ref":"GitGud.GraphQL.Resolvers.html#search_result_type/2","title":"GitGud.GraphQL.Resolvers.search_result_type/2","type":"function"},{"doc":"Updates a comment.","ref":"GitGud.GraphQL.Resolvers.html#update_comment/2","title":"GitGud.GraphQL.Resolvers.update_comment/2","type":"function"},{"doc":"Updates the label of an issue.","ref":"GitGud.GraphQL.Resolvers.html#update_issue_labels/2","title":"GitGud.GraphQL.Resolvers.update_issue_labels/2","type":"function"},{"doc":"Updates the title of an issue.","ref":"GitGud.GraphQL.Resolvers.html#update_issue_title/2","title":"GitGud.GraphQL.Resolvers.update_issue_title/2","type":"function"},{"doc":"Resolves the URL of the given resource .","ref":"GitGud.GraphQL.Resolvers.html#url/3","title":"GitGud.GraphQL.Resolvers.url/3","type":"function"},{"doc":"Resolves an user object by login.","ref":"GitGud.GraphQL.Resolvers.html#user/2","title":"GitGud.GraphQL.Resolvers.user/2","type":"function"},{"doc":"Resolves the public email for a given user .","ref":"GitGud.GraphQL.Resolvers.html#user_public_email/3","title":"GitGud.GraphQL.Resolvers.user_public_email/3","type":"function"},{"doc":"Resolves a repository object by name for a given user .","ref":"GitGud.GraphQL.Resolvers.html#user_repo/3","title":"GitGud.GraphQL.Resolvers.user_repo/3","type":"function"},{"doc":"Resolves all repositories for an user.","ref":"GitGud.GraphQL.Resolvers.html#user_repos/2","title":"GitGud.GraphQL.Resolvers.user_repos/2","type":"function"},{"doc":"Resolves the authenticated user.","ref":"GitGud.GraphQL.Resolvers.html#viewer/2","title":"GitGud.GraphQL.Resolvers.viewer/2","type":"function"},{"doc":"GraphQL schema definition.","ref":"GitGud.GraphQL.Schema.html","title":"GitGud.GraphQL.Schema","type":"module"},{"doc":"Returns the source id for the given Relay global_id .","ref":"GitGud.GraphQL.Schema.html#from_relay_id/1","title":"GitGud.GraphQL.Schema.from_relay_id/1","type":"function"},{"doc":"Returns the source struct for the given Relay global_id .","ref":"GitGud.GraphQL.Schema.html#from_relay_id/3","title":"GitGud.GraphQL.Schema.from_relay_id/3","type":"function"},{"doc":"Evaluates a query document .","ref":"GitGud.GraphQL.Schema.html#run/2","title":"GitGud.GraphQL.Schema.run/2","type":"function"},{"doc":"Returns the Relay global id for the given node .","ref":"GitGud.GraphQL.Schema.html#to_relay_id/1","title":"GitGud.GraphQL.Schema.to_relay_id/1","type":"function"},{"doc":"Returns the Relay global id for the given source_id .","ref":"GitGud.GraphQL.Schema.html#to_relay_id/2","title":"GitGud.GraphQL.Schema.to_relay_id/2","type":"function"},{"doc":"GraphQL types for GitGud.GraphQL.Schema .","ref":"GitGud.GraphQL.Types.html","title":"GitGud.GraphQL.Types","type":"module"},{"doc":"Conveniences for composing and sending emails.","ref":"GitGud.Mailer.html","title":"GitGud.Mailer","type":"module"},{"doc":"","ref":"GitGud.Mailer.html#deliver/1","title":"GitGud.Mailer.deliver/1","type":"function"},{"doc":"","ref":"GitGud.Mailer.html#deliver_later/2","title":"GitGud.Mailer.deliver_later/2","type":"function"},{"doc":"","ref":"GitGud.Mailer.html#deliver_later!/2","title":"GitGud.Mailer.deliver_later!/2","type":"function"},{"doc":"","ref":"GitGud.Mailer.html#deliver_now/2","title":"GitGud.Mailer.deliver_now/2","type":"function"},{"doc":"","ref":"GitGud.Mailer.html#deliver_now!/2","title":"GitGud.Mailer.deliver_now!/2","type":"function"},{"doc":"Returns a password reset mail for the given email .","ref":"GitGud.Mailer.html#password_reset_email/1","title":"GitGud.Mailer.password_reset_email/1","type":"function"},{"doc":"Render an Phoenix template and set the body on the email. Pass an atom as the template name (:welcome_email) to render HTML and plain text emails. Use a string if you only want to render one type, e.g. &quot;welcome_email.text&quot; or &quot;welcome_email.html&quot;. Scroll to the top for more examples.","ref":"GitGud.Mailer.html#render/3","title":"GitGud.Mailer.render/3","type":"function"},{"doc":"Returns a verification mail for the given email .","ref":"GitGud.Mailer.html#verification_email/1","title":"GitGud.Mailer.verification_email/1","type":"function"},{"doc":"Module providing helper function for controllers, views, channels and so on. This can be used in your application as: use GitGud.Web , :controller use GitGud.Web , :view","ref":"GitGud.Web.html","title":"GitGud.Web","type":"module"},{"doc":"","ref":"GitGud.Web.html#live_component/1","title":"GitGud.Web.live_component/1","type":"function"},{"doc":"Conveniences for authentication related tasks in live views.","ref":"GitGud.Web.AuthenticationLiveHelpers.html","title":"GitGud.Web.AuthenticationLiveHelpers","type":"module"},{"doc":"Authenticates socket .","ref":"GitGud.Web.AuthenticationLiveHelpers.html#authenticate/1","title":"GitGud.Web.AuthenticationLiveHelpers.authenticate/1","type":"function"},{"doc":"Authenticates socket with session .","ref":"GitGud.Web.AuthenticationLiveHelpers.html#authenticate/2","title":"GitGud.Web.AuthenticationLiveHelpers.authenticate/2","type":"function"},{"doc":"Prepares socket for authenticating later on.","ref":"GitGud.Web.AuthenticationLiveHelpers.html#authenticate_later/2","title":"GitGud.Web.AuthenticationLiveHelpers.authenticate_later/2","type":"function"},{"doc":"Similar to authenticate/2 but only applies when socket is connected.","ref":"GitGud.Web.AuthenticationLiveHelpers.html#authenticate_when_connected/2","title":"GitGud.Web.AuthenticationLiveHelpers.authenticate_when_connected/2","type":"function"},{"doc":"Returns true if the given socket is authenticated; otherwise returns false .","ref":"GitGud.Web.AuthenticationLiveHelpers.html#authenticated?/1","title":"GitGud.Web.AuthenticationLiveHelpers.authenticated?/1","type":"function"},{"doc":"Returns true if the given conn is allowed to perform action on resource ; otherwhise returns false .","ref":"GitGud.Web.AuthenticationLiveHelpers.html#authorized?/3","title":"GitGud.Web.AuthenticationLiveHelpers.authorized?/3","type":"function"},{"doc":"Returns the current user if conn is authenticated.","ref":"GitGud.Web.AuthenticationLiveHelpers.html#current_user/1","title":"GitGud.Web.AuthenticationLiveHelpers.current_user/1","type":"function"},{"doc":"Returns true if the given conn is authenticated with a verified user; otherwise returns false .","ref":"GitGud.Web.AuthenticationLiveHelpers.html#verified?/1","title":"GitGud.Web.AuthenticationLiveHelpers.verified?/1","type":"function"},{"doc":"Plug providing support for multiple authentication methods.","ref":"GitGud.Web.AuthenticationPlug.html","title":"GitGud.Web.AuthenticationPlug","type":"module"},{"doc":"Plug to authenticate conn with either authorization or session tokens.","ref":"GitGud.Web.AuthenticationPlug.html#authenticate/2","title":"GitGud.Web.AuthenticationPlug.authenticate/2","type":"function"},{"doc":"Plug to authenticate conn with authorization tokens.","ref":"GitGud.Web.AuthenticationPlug.html#authenticate_bearer_token/2","title":"GitGud.Web.AuthenticationPlug.authenticate_bearer_token/2","type":"function"},{"doc":"Plug to authenticate conn with session tokens.","ref":"GitGud.Web.AuthenticationPlug.html#authenticate_session/2","title":"GitGud.Web.AuthenticationPlug.authenticate_session/2","type":"function"},{"doc":"Returns true if the given conn is authenticated; otherwise returns false .","ref":"GitGud.Web.AuthenticationPlug.html#authenticated?/1","title":"GitGud.Web.AuthenticationPlug.authenticated?/1","type":"function"},{"doc":"Generates an authentication token.","ref":"GitGud.Web.AuthenticationPlug.html#authentication_token/1","title":"GitGud.Web.AuthenticationPlug.authentication_token/1","type":"function"},{"doc":"Returns true if the given conn is allowed to perform action on resource ; otherwhise returns false .","ref":"GitGud.Web.AuthenticationPlug.html#authorized?/3","title":"GitGud.Web.AuthenticationPlug.authorized?/3","type":"function"},{"doc":"Returns the current user if conn is authenticated.","ref":"GitGud.Web.AuthenticationPlug.html#current_user/1","title":"GitGud.Web.AuthenticationPlug.current_user/1","type":"function"},{"doc":"Plug to ensure that the request is authenticated. If the given conn is not authenticated?/1 , this prevents further plugs downstream from being invoked and returns a 401 Unauthenticated error.","ref":"GitGud.Web.AuthenticationPlug.html#ensure_authenticated/2","title":"GitGud.Web.AuthenticationPlug.ensure_authenticated/2","type":"function"},{"doc":"Returns true if the given conn is authenticated with a verified user; otherwise returns false .","ref":"GitGud.Web.AuthenticationPlug.html#verified?/1","title":"GitGud.Web.AuthenticationPlug.verified?/1","type":"function"},{"doc":"Live view responsible for rendering the latest Git commit of Git blob objects.","ref":"GitGud.Web.BlobHeaderLive.html","title":"GitGud.Web.BlobHeaderLive","type":"module"},{"doc":"Callback implementation for Phoenix.LiveView.render/1 .","ref":"GitGud.Web.BlobHeaderLive.html#render/1","title":"GitGud.Web.BlobHeaderLive.render/1","type":"function"},{"doc":"Live view container for GitGud.Web.BranchSelectLive .","ref":"GitGud.Web.BranchSelectContainerLive.html","title":"GitGud.Web.BranchSelectContainerLive","type":"module"},{"doc":"Live component responsible for rendering Git revisions drop-down lists.","ref":"GitGud.Web.BranchSelectLive.html","title":"GitGud.Web.BranchSelectLive","type":"module"},{"doc":"Callback implementation for Phoenix.LiveComponent.render/1 .","ref":"GitGud.Web.BranchSelectLive.html#render/1","title":"GitGud.Web.BranchSelectLive.render/1","type":"function"},{"doc":"Module responsible for CRUD actions on GitGud.Repo .","ref":"GitGud.Web.CodebaseController.html","title":"GitGud.Web.CodebaseController","type":"module"},{"doc":"Renders a blob for a specific revision and path.","ref":"GitGud.Web.CodebaseController.html#blob/2","title":"GitGud.Web.CodebaseController.blob/2","type":"function"},{"doc":"Renders all branches of a repository.","ref":"GitGud.Web.CodebaseController.html#branches/2","title":"GitGud.Web.CodebaseController.branches/2","type":"function"},{"doc":"Renders a single commit.","ref":"GitGud.Web.CodebaseController.html#commit/2","title":"GitGud.Web.CodebaseController.commit/2","type":"function"},{"doc":"Renders a blob delete form.","ref":"GitGud.Web.CodebaseController.html#confirm_delete/2","title":"GitGud.Web.CodebaseController.confirm_delete/2","type":"function"},{"doc":"Creates a new blob.","ref":"GitGud.Web.CodebaseController.html#create/2","title":"GitGud.Web.CodebaseController.create/2","type":"function"},{"doc":"Deletes an existing blob.","ref":"GitGud.Web.CodebaseController.html#delete/2","title":"GitGud.Web.CodebaseController.delete/2","type":"function"},{"doc":"Renders a blob edit form.","ref":"GitGud.Web.CodebaseController.html#edit/2","title":"GitGud.Web.CodebaseController.edit/2","type":"function"},{"doc":"Renders all commits for a specific revision.","ref":"GitGud.Web.CodebaseController.html#history/2","title":"GitGud.Web.CodebaseController.history/2","type":"function"},{"doc":"Renders a blob creation form.","ref":"GitGud.Web.CodebaseController.html#new/2","title":"GitGud.Web.CodebaseController.new/2","type":"function"},{"doc":"Renders all tags of a repository.","ref":"GitGud.Web.CodebaseController.html#tags/2","title":"GitGud.Web.CodebaseController.tags/2","type":"function"},{"doc":"Updates an existing blob.","ref":"GitGud.Web.CodebaseController.html#update/2","title":"GitGud.Web.CodebaseController.update/2","type":"function"},{"doc":"Live component responsible for rendering comment forms.","ref":"GitGud.Web.CommentFormLive.html","title":"GitGud.Web.CommentFormLive","type":"module"},{"doc":"Callback implementation for Phoenix.LiveComponent.render/1 .","ref":"GitGud.Web.CommentFormLive.html#render/1","title":"GitGud.Web.CommentFormLive.render/1","type":"function"},{"doc":"Live component responsible for rendering comments.","ref":"GitGud.Web.CommentLive.html","title":"GitGud.Web.CommentLive","type":"module"},{"doc":"Callback implementation for Phoenix.LiveComponent.render/1 .","ref":"GitGud.Web.CommentLive.html#render/1","title":"GitGud.Web.CommentLive.render/1","type":"function"},{"doc":"Live view responsible for rendering diffs between Git commits.","ref":"GitGud.Web.CommitDiffLive.html","title":"GitGud.Web.CommitDiffLive","type":"module"},{"doc":"Callback implementation for Phoenix.LiveView.render/1 .","ref":"GitGud.Web.CommitDiffLive.html#render/1","title":"GitGud.Web.CommitDiffLive.render/1","type":"function"},{"doc":"Live component responsible for rendering commit line reviews.","ref":"GitGud.Web.CommitLineReviewLive.html","title":"GitGud.Web.CommitLineReviewLive","type":"module"},{"doc":"Callback implementation for Phoenix.LiveComponent.render/1 .","ref":"GitGud.Web.CommitLineReviewLive.html#render/1","title":"GitGud.Web.CommitLineReviewLive.render/1","type":"function"},{"doc":"Conveniences for formatting DateTime , Date and Time values.","ref":"GitGud.Web.DateTimeFormatter.html","title":"GitGud.Web.DateTimeFormatter","type":"module"},{"doc":"Renders a date/time widget using the given format string.","ref":"GitGud.Web.DateTimeFormatter.html#datetime_format/2","title":"GitGud.Web.DateTimeFormatter.datetime_format/2","type":"function"},{"doc":"Formats a date/time value using the given format string.","ref":"GitGud.Web.DateTimeFormatter.html#datetime_format_str/2","title":"GitGud.Web.DateTimeFormatter.datetime_format_str/2","type":"function"},{"doc":"Module responsible for CRUD actions on GitGud.Email .","ref":"GitGud.Web.EmailController.html","title":"GitGud.Web.EmailController","type":"module"},{"doc":"Creates a new email address.","ref":"GitGud.Web.EmailController.html#create/2","title":"GitGud.Web.EmailController.create/2","type":"function"},{"doc":"Deletes an email address.","ref":"GitGud.Web.EmailController.html#delete/2","title":"GitGud.Web.EmailController.delete/2","type":"function"},{"doc":"Renders emails address.","ref":"GitGud.Web.EmailController.html#index/2","title":"GitGud.Web.EmailController.index/2","type":"function"},{"doc":"Sends a verification email.","ref":"GitGud.Web.EmailController.html#send_verification/2","title":"GitGud.Web.EmailController.send_verification/2","type":"function"},{"doc":"Updates an email address.","ref":"GitGud.Web.EmailController.html#update/2","title":"GitGud.Web.EmailController.update/2","type":"function"},{"doc":"Verifies an email address using a bearer token.","ref":"GitGud.Web.EmailController.html#verify/2","title":"GitGud.Web.EmailController.verify/2","type":"function"},{"doc":"Conveniences for rendering emojis.","ref":"GitGud.Web.Emoji.html","title":"GitGud.Web.Emoji","type":"module"},{"doc":"Renders the emoji codepoints for the given name .","ref":"GitGud.Web.Emoji.html#render/1","title":"GitGud.Web.Emoji.render/1","type":"function"},{"doc":"HTTP and WebSocket endpoints.","ref":"GitGud.Web.Endpoint.html","title":"GitGud.Web.Endpoint","type":"module"},{"doc":"Callback implementation for Phoenix.Endpoint.broadcast/3 .","ref":"GitGud.Web.Endpoint.html#broadcast/3","title":"GitGud.Web.Endpoint.broadcast/3","type":"function"},{"doc":"Callback implementation for Phoenix.Endpoint.broadcast!/3 .","ref":"GitGud.Web.Endpoint.html#broadcast!/3","title":"GitGud.Web.Endpoint.broadcast!/3","type":"function"},{"doc":"Callback implementation for Phoenix.Endpoint.broadcast_from/4 .","ref":"GitGud.Web.Endpoint.html#broadcast_from/4","title":"GitGud.Web.Endpoint.broadcast_from/4","type":"function"},{"doc":"Callback implementation for Phoenix.Endpoint.broadcast_from!/4 .","ref":"GitGud.Web.Endpoint.html#broadcast_from!/4","title":"GitGud.Web.Endpoint.broadcast_from!/4","type":"function"},{"doc":"Callback implementation for Plug.call/2 .","ref":"GitGud.Web.Endpoint.html#call/2","title":"GitGud.Web.Endpoint.call/2","type":"function"},{"doc":"Returns the child specification to start the endpoint under a supervision tree.","ref":"GitGud.Web.Endpoint.html#child_spec/1","title":"GitGud.Web.Endpoint.child_spec/1","type":"function"},{"doc":"Returns the endpoint configuration for key Returns default if the key does not exist.","ref":"GitGud.Web.Endpoint.html#config/2","title":"GitGud.Web.Endpoint.config/2","type":"function"},{"doc":"Reloads the configuration given the application environment changes.","ref":"GitGud.Web.Endpoint.html#config_change/2","title":"GitGud.Web.Endpoint.config_change/2","type":"function"},{"doc":"Returns the host for the given endpoint.","ref":"GitGud.Web.Endpoint.html#host/0","title":"GitGud.Web.Endpoint.host/0","type":"function"},{"doc":"Callback implementation for Plug.init/1 .","ref":"GitGud.Web.Endpoint.html#init/1","title":"GitGud.Web.Endpoint.init/1","type":"function"},{"doc":"Callback implementation for Phoenix.Endpoint.local_broadcast/3 .","ref":"GitGud.Web.Endpoint.html#local_broadcast/3","title":"GitGud.Web.Endpoint.local_broadcast/3","type":"function"},{"doc":"Callback implementation for Phoenix.Endpoint.local_broadcast_from/4 .","ref":"GitGud.Web.Endpoint.html#local_broadcast_from/4","title":"GitGud.Web.Endpoint.local_broadcast_from/4","type":"function"},{"doc":"Callback implementation for Absinthe.Subscription.Pubsub.node_name/0 .","ref":"GitGud.Web.Endpoint.html#node_name/0","title":"GitGud.Web.Endpoint.node_name/0","type":"function"},{"doc":"Generates the path information when routing to this endpoint.","ref":"GitGud.Web.Endpoint.html#path/1","title":"GitGud.Web.Endpoint.path/1","type":"function"},{"doc":"Callback implementation for Absinthe.Subscription.Pubsub.publish_mutation/3 .","ref":"GitGud.Web.Endpoint.html#publish_mutation/3","title":"GitGud.Web.Endpoint.publish_mutation/3","type":"function"},{"doc":"Callback implementation for Absinthe.Subscription.Pubsub.publish_subscription/2 .","ref":"GitGud.Web.Endpoint.html#publish_subscription/2","title":"GitGud.Web.Endpoint.publish_subscription/2","type":"function"},{"doc":"Generates the script name.","ref":"GitGud.Web.Endpoint.html#script_name/0","title":"GitGud.Web.Endpoint.script_name/0","type":"function"},{"doc":"Starts the endpoint supervision tree. Options :log_access_url - if the access url should be logged once the endpoint starts All other options are merged into the endpoint configuration.","ref":"GitGud.Web.Endpoint.html#start_link/1","title":"GitGud.Web.Endpoint.start_link/1","type":"function"},{"doc":"Generates a base64-encoded cryptographic hash (sha512) to a static file in priv/static . Meant to be used for Subresource Integrity with CDNs.","ref":"GitGud.Web.Endpoint.html#static_integrity/1","title":"GitGud.Web.Endpoint.static_integrity/1","type":"function"},{"doc":"Returns a two item tuple with the first item being the static_path and the second item being the static_integrity .","ref":"GitGud.Web.Endpoint.html#static_lookup/1","title":"GitGud.Web.Endpoint.static_lookup/1","type":"function"},{"doc":"Generates a route to a static file in priv/static .","ref":"GitGud.Web.Endpoint.html#static_path/1","title":"GitGud.Web.Endpoint.static_path/1","type":"function"},{"doc":"Generates the static URL without any path information. It uses the configuration under :static_url to generate such. It falls back to :url if :static_url is not set.","ref":"GitGud.Web.Endpoint.html#static_url/0","title":"GitGud.Web.Endpoint.static_url/0","type":"function"},{"doc":"Generates the endpoint base URL but as a URI struct. It uses the configuration under :url to generate such. Useful for manipulating the URL data and passing it to URL helpers.","ref":"GitGud.Web.Endpoint.html#struct_url/0","title":"GitGud.Web.Endpoint.struct_url/0","type":"function"},{"doc":"","ref":"GitGud.Web.Endpoint.html#subscribe/2","title":"GitGud.Web.Endpoint.subscribe/2","type":"function"},{"doc":"","ref":"GitGud.Web.Endpoint.html#unsubscribe/1","title":"GitGud.Web.Endpoint.unsubscribe/1","type":"function"},{"doc":"Generates the endpoint base URL without any path information. It uses the configuration under :url to generate such.","ref":"GitGud.Web.Endpoint.html#url/0","title":"GitGud.Web.Endpoint.url/0","type":"function"},{"doc":"Conveniences for translating and building error messages.","ref":"GitGud.Web.ErrorHelpers.html","title":"GitGud.Web.ErrorHelpers","type":"module"},{"doc":"Generates tag for inlined form input errors.","ref":"GitGud.Web.ErrorHelpers.html#error_tag/2","title":"GitGud.Web.ErrorHelpers.error_tag/2","type":"function"},{"doc":"Translates an error message using gettext.","ref":"GitGud.Web.ErrorHelpers.html#translate_error/1","title":"GitGud.Web.ErrorHelpers.translate_error/1","type":"function"},{"doc":"Module providing error views for most common errors.","ref":"GitGud.Web.ErrorView.html","title":"GitGud.Web.ErrorView","type":"module"},{"doc":"The resource name, as an atom, for this view","ref":"GitGud.Web.ErrorView.html#__resource__/0","title":"GitGud.Web.ErrorView.__resource__/0","type":"function"},{"doc":"Renders the given template locally.","ref":"GitGud.Web.ErrorView.html#render/2","title":"GitGud.Web.ErrorView.render/2","type":"function"},{"doc":"Callback invoked when no template is found. By default it raises but can be customized to render a particular template.","ref":"GitGud.Web.ErrorView.html#template_not_found/2","title":"GitGud.Web.ErrorView.template_not_found/2","type":"function"},{"doc":"","ref":"GitGud.Web.ErrorView.html#title/2","title":"GitGud.Web.ErrorView.title/2","type":"function"},{"doc":"Translates controller action results into valid Plug.Conn responses. See Phoenix.Controller.action_fallback/1 for more details.","ref":"GitGud.Web.FallbackController.html","title":"GitGud.Web.FallbackController","type":"module"},{"doc":"Conveniences for custom HTML input validations. This module overloads input functions defined by Phoenix.HTML.Form by passing custom input_validations/2 to the HTML input target attributes.","ref":"GitGud.Web.FormHelpers.html","title":"GitGud.Web.FormHelpers","type":"module"},{"doc":"See Phoenix.HTML.Form.checkbox/3 for more details.","ref":"GitGud.Web.FormHelpers.html#checkbox/3","title":"GitGud.Web.FormHelpers.checkbox/3","type":"function"},{"doc":"See Phoenix.HTML.Form.date_input/3 for more details.","ref":"GitGud.Web.FormHelpers.html#date_input/3","title":"GitGud.Web.FormHelpers.date_input/3","type":"function"},{"doc":"See Phoenix.HTML.Form.date_select/3 for more details.","ref":"GitGud.Web.FormHelpers.html#date_select/3","title":"GitGud.Web.FormHelpers.date_select/3","type":"function"},{"doc":"See Phoenix.HTML.Form.datetime_local_input/3 for more details.","ref":"GitGud.Web.FormHelpers.html#datetime_local_input/3","title":"GitGud.Web.FormHelpers.datetime_local_input/3","type":"function"},{"doc":"See Phoenix.HTML.Form.datetime_select/3 for more details.","ref":"GitGud.Web.FormHelpers.html#datetime_select/3","title":"GitGud.Web.FormHelpers.datetime_select/3","type":"function"},{"doc":"See Phoenix.HTML.Form.email_input/3 for more details.","ref":"GitGud.Web.FormHelpers.html#email_input/3","title":"GitGud.Web.FormHelpers.email_input/3","type":"function"},{"doc":"See Phoenix.HTML.Form.file_input/3 for more details.","ref":"GitGud.Web.FormHelpers.html#file_input/3","title":"GitGud.Web.FormHelpers.file_input/3","type":"function"},{"doc":"See Phoenix.HTML.Form.hidden_input/3 for more details.","ref":"GitGud.Web.FormHelpers.html#hidden_input/3","title":"GitGud.Web.FormHelpers.hidden_input/3","type":"function"},{"doc":"See Phoenix.HTML.Form.input_validations/2 for more details.","ref":"GitGud.Web.FormHelpers.html#input_validations/2","title":"GitGud.Web.FormHelpers.input_validations/2","type":"function"},{"doc":"See Phoenix.HTML.Form.multiple_select/4 for more details.","ref":"GitGud.Web.FormHelpers.html#multiple_select/4","title":"GitGud.Web.FormHelpers.multiple_select/4","type":"function"},{"doc":"See Phoenix.HTML.Form.number_input/3 for more details.","ref":"GitGud.Web.FormHelpers.html#number_input/3","title":"GitGud.Web.FormHelpers.number_input/3","type":"function"},{"doc":"See Phoenix.HTML.Form.password_input/3 for more details.","ref":"GitGud.Web.FormHelpers.html#password_input/3","title":"GitGud.Web.FormHelpers.password_input/3","type":"function"},{"doc":"See Phoenix.HTML.Form.radio_button/4 for more details.","ref":"GitGud.Web.FormHelpers.html#radio_button/4","title":"GitGud.Web.FormHelpers.radio_button/4","type":"function"},{"doc":"See Phoenix.HTML.Form.range_input/3 for more details.","ref":"GitGud.Web.FormHelpers.html#range_input/3","title":"GitGud.Web.FormHelpers.range_input/3","type":"function"},{"doc":"See Phoenix.HTML.Form.search_input/3 for more details.","ref":"GitGud.Web.FormHelpers.html#search_input/3","title":"GitGud.Web.FormHelpers.search_input/3","type":"function"},{"doc":"See Phoenix.HTML.Form.select/4 for more details.","ref":"GitGud.Web.FormHelpers.html#select/4","title":"GitGud.Web.FormHelpers.select/4","type":"function"},{"doc":"See Phoenix.HTML.Form.telephone_input/3 for more details.","ref":"GitGud.Web.FormHelpers.html#telephone_input/3","title":"GitGud.Web.FormHelpers.telephone_input/3","type":"function"},{"doc":"See Phoenix.HTML.Form.text_input/3 for more details.","ref":"GitGud.Web.FormHelpers.html#text_input/3","title":"GitGud.Web.FormHelpers.text_input/3","type":"function"},{"doc":"See Phoenix.HTML.Form.textarea/3 for more details.","ref":"GitGud.Web.FormHelpers.html#textarea/3","title":"GitGud.Web.FormHelpers.textarea/3","type":"function"},{"doc":"See Phoenix.HTML.Form.time_input/3 for more details.","ref":"GitGud.Web.FormHelpers.html#time_input/3","title":"GitGud.Web.FormHelpers.time_input/3","type":"function"},{"doc":"See Phoenix.HTML.Form.time_select/3 for more details.","ref":"GitGud.Web.FormHelpers.html#time_select/3","title":"GitGud.Web.FormHelpers.time_select/3","type":"function"},{"doc":"See Phoenix.HTML.Form.url_input/3 for more details.","ref":"GitGud.Web.FormHelpers.html#url_input/3","title":"GitGud.Web.FormHelpers.url_input/3","type":"function"},{"doc":"Module responsible for CRUD actions on GitGud.GPGKey .","ref":"GitGud.Web.GPGKeyController.html","title":"GitGud.Web.GPGKeyController","type":"module"},{"doc":"Creates a new GPG key.","ref":"GitGud.Web.GPGKeyController.html#create/2","title":"GitGud.Web.GPGKeyController.create/2","type":"function"},{"doc":"Deletes a GPG key.","ref":"GitGud.Web.GPGKeyController.html#delete/2","title":"GitGud.Web.GPGKeyController.delete/2","type":"function"},{"doc":"Renders GPG keys.","ref":"GitGud.Web.GPGKeyController.html#index/2","title":"GitGud.Web.GPGKeyController.index/2","type":"function"},{"doc":"Renders a creation form for GPG keys.","ref":"GitGud.Web.GPGKeyController.html#new/2","title":"GitGud.Web.GPGKeyController.new/2","type":"function"},{"doc":"Module providing Internationalization with a gettext-based API. By using Gettext , your module gains a set of macros for translations, for example: import GitGud.Web.Gettext # Simple translation gettext &quot;Here is the string to translate&quot; # Plural translation ngettext &quot;Here is the string to translate&quot; , &quot;Here are the strings to translate&quot; , 3 # Domain-based translation dgettext &quot;errors&quot; , &quot;Here is the error message to translate&quot; See the Gettext Docs for detailed usage.","ref":"GitGud.Web.Gettext.html","title":"GitGud.Web.Gettext","type":"module"},{"doc":"Callback implementation for Gettext.Backend.dgettext/3 .","ref":"GitGud.Web.Gettext.html#dgettext/3","title":"GitGud.Web.Gettext.dgettext/3","type":"macro"},{"doc":"Callback implementation for Gettext.Backend.dgettext_noop/2 .","ref":"GitGud.Web.Gettext.html#dgettext_noop/2","title":"GitGud.Web.Gettext.dgettext_noop/2","type":"macro"},{"doc":"Callback implementation for Gettext.Backend.dngettext/5 .","ref":"GitGud.Web.Gettext.html#dngettext/5","title":"GitGud.Web.Gettext.dngettext/5","type":"macro"},{"doc":"Callback implementation for Gettext.Backend.dngettext_noop/3 .","ref":"GitGud.Web.Gettext.html#dngettext_noop/3","title":"GitGud.Web.Gettext.dngettext_noop/3","type":"macro"},{"doc":"Callback implementation for Gettext.Backend.dpgettext/4 .","ref":"GitGud.Web.Gettext.html#dpgettext/4","title":"GitGud.Web.Gettext.dpgettext/4","type":"macro"},{"doc":"","ref":"GitGud.Web.Gettext.html#dpgettext_noop/3","title":"GitGud.Web.Gettext.dpgettext_noop/3","type":"macro"},{"doc":"Callback implementation for Gettext.Backend.dpngettext/6 .","ref":"GitGud.Web.Gettext.html#dpngettext/6","title":"GitGud.Web.Gettext.dpngettext/6","type":"macro"},{"doc":"","ref":"GitGud.Web.Gettext.html#dpngettext_noop/4","title":"GitGud.Web.Gettext.dpngettext_noop/4","type":"macro"},{"doc":"Callback implementation for Gettext.Backend.gettext/2 .","ref":"GitGud.Web.Gettext.html#gettext/2","title":"GitGud.Web.Gettext.gettext/2","type":"macro"},{"doc":"Callback implementation for Gettext.Backend.gettext_comment/1 .","ref":"GitGud.Web.Gettext.html#gettext_comment/1","title":"GitGud.Web.Gettext.gettext_comment/1","type":"macro"},{"doc":"Callback implementation for Gettext.Backend.gettext_noop/1 .","ref":"GitGud.Web.Gettext.html#gettext_noop/1","title":"GitGud.Web.Gettext.gettext_noop/1","type":"macro"},{"doc":"Callback implementation for Gettext.Backend.handle_missing_bindings/2 .","ref":"GitGud.Web.Gettext.html#handle_missing_bindings/2","title":"GitGud.Web.Gettext.handle_missing_bindings/2","type":"function"},{"doc":"Callback implementation for Gettext.Backend.handle_missing_plural_translation/6 .","ref":"GitGud.Web.Gettext.html#handle_missing_plural_translation/6","title":"GitGud.Web.Gettext.handle_missing_plural_translation/6","type":"function"},{"doc":"Callback implementation for Gettext.Backend.handle_missing_translation/4 .","ref":"GitGud.Web.Gettext.html#handle_missing_translation/4","title":"GitGud.Web.Gettext.handle_missing_translation/4","type":"function"},{"doc":"","ref":"GitGud.Web.Gettext.html#lgettext/5","title":"GitGud.Web.Gettext.lgettext/5","type":"function"},{"doc":"","ref":"GitGud.Web.Gettext.html#lngettext/7","title":"GitGud.Web.Gettext.lngettext/7","type":"function"},{"doc":"Callback implementation for Gettext.Backend.ngettext/4 .","ref":"GitGud.Web.Gettext.html#ngettext/4","title":"GitGud.Web.Gettext.ngettext/4","type":"macro"},{"doc":"Callback implementation for Gettext.Backend.ngettext_noop/2 .","ref":"GitGud.Web.Gettext.html#ngettext_noop/2","title":"GitGud.Web.Gettext.ngettext_noop/2","type":"macro"},{"doc":"Callback implementation for Gettext.Backend.pgettext/3 .","ref":"GitGud.Web.Gettext.html#pgettext/3","title":"GitGud.Web.Gettext.pgettext/3","type":"macro"},{"doc":"","ref":"GitGud.Web.Gettext.html#pgettext_noop/2","title":"GitGud.Web.Gettext.pgettext_noop/2","type":"macro"},{"doc":"Callback implementation for Gettext.Backend.pngettext/5 .","ref":"GitGud.Web.Gettext.html#pngettext/5","title":"GitGud.Web.Gettext.pngettext/5","type":"macro"},{"doc":"","ref":"GitGud.Web.Gettext.html#pngettext_noop/3","title":"GitGud.Web.Gettext.pngettext_noop/3","type":"macro"},{"doc":"Live view responsible for rendering the global search in the top-level navigation bar.","ref":"GitGud.Web.GlobalSearchLive.html","title":"GitGud.Web.GlobalSearchLive","type":"module"},{"doc":"Callback implementation for Phoenix.LiveView.render/1 .","ref":"GitGud.Web.GlobalSearchLive.html#render/1","title":"GitGud.Web.GlobalSearchLive.render/1","type":"function"},{"doc":"Conveniences for rendering Gravatars.","ref":"GitGud.Web.Gravatar.html","title":"GitGud.Web.Gravatar","type":"module"},{"doc":"Renders a Gravatar widget for the given email .","ref":"GitGud.Web.Gravatar.html#gravatar/2","title":"GitGud.Web.Gravatar.gravatar/2","type":"function"},{"doc":"Module responsible for CRUD actions on GitGud.Issue .","ref":"GitGud.Web.IssueController.html","title":"GitGud.Web.IssueController","type":"module"},{"doc":"Creates a new issue.","ref":"GitGud.Web.IssueController.html#create/2","title":"GitGud.Web.IssueController.create/2","type":"function"},{"doc":"Render issues.","ref":"GitGud.Web.IssueController.html#index/2","title":"GitGud.Web.IssueController.index/2","type":"function"},{"doc":"Renders an issue creation form.","ref":"GitGud.Web.IssueController.html#new/2","title":"GitGud.Web.IssueController.new/2","type":"function"},{"doc":"Live component responsible for rendering issue events.","ref":"GitGud.Web.IssueEventLive.html","title":"GitGud.Web.IssueEventLive","type":"module"},{"doc":"Callback implementation for Phoenix.LiveComponent.render/1 .","ref":"GitGud.Web.IssueEventLive.html#render/1","title":"GitGud.Web.IssueEventLive.render/1","type":"function"},{"doc":"Live view responsible for rendering issue forms.","ref":"GitGud.Web.IssueFormLive.html","title":"GitGud.Web.IssueFormLive","type":"module"},{"doc":"Callback implementation for Phoenix.LiveView.render/1 .","ref":"GitGud.Web.IssueFormLive.html#render/1","title":"GitGud.Web.IssueFormLive.render/1","type":"function"},{"doc":"Module responsible for CRUD actions on GitGud.IssueLabel .","ref":"GitGud.Web.IssueLabelController.html","title":"GitGud.Web.IssueLabelController","type":"module"},{"doc":"Renders issue labels.","ref":"GitGud.Web.IssueLabelController.html#index/2","title":"GitGud.Web.IssueLabelController.index/2","type":"function"},{"doc":"Updates issue labels.","ref":"GitGud.Web.IssueLabelController.html#update/2","title":"GitGud.Web.IssueLabelController.update/2","type":"function"},{"doc":"Live component responsible for rendering issue labels drop-down lists.","ref":"GitGud.Web.IssueLabelSelectLive.html","title":"GitGud.Web.IssueLabelSelectLive","type":"module"},{"doc":"Callback implementation for Phoenix.LiveComponent.render/1 .","ref":"GitGud.Web.IssueLabelSelectLive.html#render/1","title":"GitGud.Web.IssueLabelSelectLive.render/1","type":"function"},{"doc":"Live view responsible for rendering issues.","ref":"GitGud.Web.IssueLive.html","title":"GitGud.Web.IssueLive","type":"module"},{"doc":"Callback implementation for Phoenix.LiveView.render/1 .","ref":"GitGud.Web.IssueLive.html#render/1","title":"GitGud.Web.IssueLive.render/1","type":"function"},{"doc":"Module responsible for the landing page.","ref":"GitGud.Web.LandingPageController.html","title":"GitGud.Web.LandingPageController","type":"module"},{"doc":"","ref":"GitGud.Web.LandingPageController.html#index/2","title":"GitGud.Web.LandingPageController.index/2","type":"function"},{"doc":"Module responsible for CRUD actions on GitGud.Maintainer .","ref":"GitGud.Web.MaintainerController.html","title":"GitGud.Web.MaintainerController","type":"module"},{"doc":"Creates a new maintainer.","ref":"GitGud.Web.MaintainerController.html#create/2","title":"GitGud.Web.MaintainerController.create/2","type":"function"},{"doc":"Deletes a maintainer.","ref":"GitGud.Web.MaintainerController.html#delete/2","title":"GitGud.Web.MaintainerController.delete/2","type":"function"},{"doc":"Renders maintainers.","ref":"GitGud.Web.MaintainerController.html#index/2","title":"GitGud.Web.MaintainerController.index/2","type":"function"},{"doc":"Updates a maintainer's permissions.","ref":"GitGud.Web.MaintainerController.html#update/2","title":"GitGud.Web.MaintainerController.update/2","type":"function"},{"doc":"Live view responsible for rendering forms to add repository maintainers.","ref":"GitGud.Web.MaintainerSearchFormLive.html","title":"GitGud.Web.MaintainerSearchFormLive","type":"module"},{"doc":"Callback implementation for Phoenix.LiveView.render/1 .","ref":"GitGud.Web.MaintainerSearchFormLive.html#render/1","title":"GitGud.Web.MaintainerSearchFormLive.render/1","type":"function"},{"doc":"Conveniences for rendering Markdown.","ref":"GitGud.Web.Markdown.html","title":"GitGud.Web.Markdown","type":"module"},{"doc":"Renders a Markdown formatted content to HTML.","ref":"GitGud.Web.Markdown.html#markdown/2","title":"GitGud.Web.Markdown.markdown/2","type":"function"},{"doc":"Renders a Markdown formatted content to HTML and marks it as safe for Phoenix to render.","ref":"GitGud.Web.Markdown.html#markdown_safe/2","title":"GitGud.Web.Markdown.markdown_safe/2","type":"function"},{"doc":"Returns a map of potential matches for the given content .","ref":"GitGud.Web.Markdown.html#parse/1","title":"GitGud.Web.Markdown.parse/1","type":"function"},{"doc":"Conveniences for routing and navigation.","ref":"GitGud.Web.NavigationHelpers.html","title":"GitGud.Web.NavigationHelpers","type":"module"},{"doc":"Returns the conn controller and action as tuple.","ref":"GitGud.Web.NavigationHelpers.html#current_route/1","title":"GitGud.Web.NavigationHelpers.current_route/1","type":"function"},{"doc":"Returns true if conn matches the given route helper ; otherwhise return false .","ref":"GitGud.Web.NavigationHelpers.html#current_route?/3","title":"GitGud.Web.NavigationHelpers.current_route?/3","type":"function"},{"doc":"Renders a navigation item for the given helper and action .","ref":"GitGud.Web.NavigationHelpers.html#navigation_item/6","title":"GitGud.Web.NavigationHelpers.navigation_item/6","type":"function"},{"doc":"Module responsible for OAuth2.0 authentication.","ref":"GitGud.Web.OAuth2Controller.html","title":"GitGud.Web.OAuth2Controller","type":"module"},{"doc":"Redirects to the providers authorize URL.","ref":"GitGud.Web.OAuth2Controller.html#authorize/2","title":"GitGud.Web.OAuth2Controller.authorize/2","type":"function"},{"doc":"Authenticates user with OAuth2.0 access token.","ref":"GitGud.Web.OAuth2Controller.html#callback/2","title":"GitGud.Web.OAuth2Controller.callback/2","type":"function"},{"doc":"Deletes an OAuth2.0 provider.","ref":"GitGud.Web.OAuth2Controller.html#delete/2","title":"GitGud.Web.OAuth2Controller.delete/2","type":"function"},{"doc":"Renders OAuth2.0 providers.","ref":"GitGud.Web.OAuth2Controller.html#index/2","title":"GitGud.Web.OAuth2Controller.index/2","type":"function"},{"doc":"Conveniences for list pagination.","ref":"GitGud.Web.PaginationHelpers.html","title":"GitGud.Web.PaginationHelpers","type":"module"},{"doc":"Paginates the given stream .","ref":"GitGud.Web.PaginationHelpers.html#paginate/3","title":"GitGud.Web.PaginationHelpers.paginate/3","type":"function"},{"doc":"Paginates the given stream .","ref":"GitGud.Web.PaginationHelpers.html#paginate_cursor/5","title":"GitGud.Web.PaginationHelpers.paginate_cursor/5","type":"function"},{"doc":"Renders a pagination widget for the given page .","ref":"GitGud.Web.PaginationHelpers.html#pagination/2","title":"GitGud.Web.PaginationHelpers.pagination/2","type":"function"},{"doc":"Functions to make rendering React components.","ref":"GitGud.Web.ReactComponents.html","title":"GitGud.Web.ReactComponents","type":"module"},{"doc":"Generates a :div containing the named React component with no props or attrs. Returns safe html: {:safe, [60, &quot;div&quot;, ...]} . You can utilize this in your Phoenix views: &lt; % = GitGud.Web.React . react_component ( &quot;MyComponent&quot; ) % &gt; The resulting &lt;div&gt; tag is formatted specifically for the included javascript helper to then turn into your named React component.","ref":"GitGud.Web.ReactComponents.html#react_component/1","title":"GitGud.Web.ReactComponents.react_component/1","type":"function"},{"doc":"Generates a :div containing the named React component with the given props . Returns safe html: {:safe, [60, &quot;div&quot;, ...]} . You can utilize this in your Phoenix views: &lt; % = GitGud.Web.React . react_component ( &quot;MyComponent&quot; , %{ language : &quot;elixir&quot; , awesome : true } ) % &gt; The resulting &lt;div&gt; tag is formatted specifically for the included javascript helper to then turn into your named React component and then pass in the props specified.","ref":"GitGud.Web.ReactComponents.html#react_component/2","title":"GitGud.Web.ReactComponents.react_component/2","type":"function"},{"doc":"Generates a :div containing the named React component with the given props and attrs . Returns safe html: {:safe, [60, &quot;div&quot;, ...]} . You can utilize this in your Phoenix views: &lt; % = GitGud.Web.React . react_component ( &quot;MyComponent&quot; , %{ language : &quot;elixir&quot; , awesome : true } , class : &quot;my-component&quot; ) % &gt; The resulting &lt;div&gt; tag is formatted specifically for the included javascript helper to then turn into your named React component and then pass in the props specified.","ref":"GitGud.Web.ReactComponents.html#react_component/3","title":"GitGud.Web.ReactComponents.react_component/3","type":"function"},{"doc":"Generates a :div containing the named React component with the given props and attrs . Returns safe html: {:safe, [60, &quot;div&quot;, ...]} . You can utilize this in your Phoenix views: &lt; % = GitGud.Web.React . react_component ( &quot;MyComponent&quot; , %{ language : &quot;elixir&quot; , awesome : true } , class : &quot;my-component&quot; ) do % &gt; &lt; p &gt; &lt; em &gt; this text is rendered until the component is initialized &lt; / em &gt; &lt; / p &gt; &lt; % end % &gt; The resulting &lt;div&gt; tag is formatted specifically for the included javascript helper to then turn into your named React component and then pass in the props specified.","ref":"GitGud.Web.ReactComponents.html#react_component/4","title":"GitGud.Web.ReactComponents.react_component/4","type":"function"},{"doc":"Module responsible for CRUD actions on GitGud.SSHKey .","ref":"GitGud.Web.RepoController.html","title":"GitGud.Web.RepoController","type":"module"},{"doc":"Creates a new repository.","ref":"GitGud.Web.RepoController.html#create/2","title":"GitGud.Web.RepoController.create/2","type":"function"},{"doc":"Updates a repository.","ref":"GitGud.Web.RepoController.html#delete/2","title":"GitGud.Web.RepoController.delete/2","type":"function"},{"doc":"Renders a repository edit form.","ref":"GitGud.Web.RepoController.html#edit/2","title":"GitGud.Web.RepoController.edit/2","type":"function"},{"doc":"Renders user repositories.","ref":"GitGud.Web.RepoController.html#index/2","title":"GitGud.Web.RepoController.index/2","type":"function"},{"doc":"Renders a repository creation form.","ref":"GitGud.Web.RepoController.html#new/2","title":"GitGud.Web.RepoController.new/2","type":"function"},{"doc":"Updates a repository.","ref":"GitGud.Web.RepoController.html#update/2","title":"GitGud.Web.RepoController.update/2","type":"function"},{"doc":"Module with named helpers generated from GitGud.Web.Router.","ref":"GitGud.Web.Router.Helpers.html","title":"GitGud.Web.Router.Helpers","type":"module"},{"doc":"","ref":"GitGud.Web.Router.Helpers.html#codebase_path/4","title":"GitGud.Web.Router.Helpers.codebase_path/4","type":"function"},{"doc":"","ref":"GitGud.Web.Router.Helpers.html#codebase_path/5","title":"GitGud.Web.Router.Helpers.codebase_path/5","type":"function"},{"doc":"","ref":"GitGud.Web.Router.Helpers.html#codebase_path/6","title":"GitGud.Web.Router.Helpers.codebase_path/6","type":"function"},{"doc":"","ref":"GitGud.Web.Router.Helpers.html#codebase_path/7","title":"GitGud.Web.Router.Helpers.codebase_path/7","type":"function"},{"doc":"","ref":"GitGud.Web.Router.Helpers.html#codebase_url/4","title":"GitGud.Web.Router.Helpers.codebase_url/4","type":"function"},{"doc":"","ref":"GitGud.Web.Router.Helpers.html#codebase_url/5","title":"GitGud.Web.Router.Helpers.codebase_url/5","type":"function"},{"doc":"","ref":"GitGud.Web.Router.Helpers.html#codebase_url/6","title":"GitGud.Web.Router.Helpers.codebase_url/6","type":"function"},{"doc":"","ref":"GitGud.Web.Router.Helpers.html#codebase_url/7","title":"GitGud.Web.Router.Helpers.codebase_url/7","type":"function"},{"doc":"","ref":"GitGud.Web.Router.Helpers.html#email_path/2","title":"GitGud.Web.Router.Helpers.email_path/2","type":"function"},{"doc":"","ref":"GitGud.Web.Router.Helpers.html#email_path/3","title":"GitGud.Web.Router.Helpers.email_path/3","type":"function"},{"doc":"","ref":"GitGud.Web.Router.Helpers.html#email_path/4","title":"GitGud.Web.Router.Helpers.email_path/4","type":"function"},{"doc":"","ref":"GitGud.Web.Router.Helpers.html#email_url/2","title":"GitGud.Web.Router.Helpers.email_url/2","type":"function"},{"doc":"","ref":"GitGud.Web.Router.Helpers.html#email_url/3","title":"GitGud.Web.Router.Helpers.email_url/3","type":"function"},{"doc":"","ref":"GitGud.Web.Router.Helpers.html#email_url/4","title":"GitGud.Web.Router.Helpers.email_url/4","type":"function"},{"doc":"","ref":"GitGud.Web.Router.Helpers.html#gpg_key_path/2","title":"GitGud.Web.Router.Helpers.gpg_key_path/2","type":"function"},{"doc":"","ref":"GitGud.Web.Router.Helpers.html#gpg_key_path/3","title":"GitGud.Web.Router.Helpers.gpg_key_path/3","type":"function"},{"doc":"","ref":"GitGud.Web.Router.Helpers.html#gpg_key_url/2","title":"GitGud.Web.Router.Helpers.gpg_key_url/2","type":"function"},{"doc":"","ref":"GitGud.Web.Router.Helpers.html#gpg_key_url/3","title":"GitGud.Web.Router.Helpers.gpg_key_url/3","type":"function"},{"doc":"","ref":"GitGud.Web.Router.Helpers.html#issue_label_path/4","title":"GitGud.Web.Router.Helpers.issue_label_path/4","type":"function"},{"doc":"","ref":"GitGud.Web.Router.Helpers.html#issue_label_path/5","title":"GitGud.Web.Router.Helpers.issue_label_path/5","type":"function"},{"doc":"","ref":"GitGud.Web.Router.Helpers.html#issue_label_url/4","title":"GitGud.Web.Router.Helpers.issue_label_url/4","type":"function"},{"doc":"","ref":"GitGud.Web.Router.Helpers.html#issue_label_url/5","title":"GitGud.Web.Router.Helpers.issue_label_url/5","type":"function"},{"doc":"","ref":"GitGud.Web.Router.Helpers.html#issue_path/4","title":"GitGud.Web.Router.Helpers.issue_path/4","type":"function"},{"doc":"","ref":"GitGud.Web.Router.Helpers.html#issue_path/5","title":"GitGud.Web.Router.Helpers.issue_path/5","type":"function"},{"doc":"","ref":"GitGud.Web.Router.Helpers.html#issue_path/6","title":"GitGud.Web.Router.Helpers.issue_path/6","type":"function"},{"doc":"","ref":"GitGud.Web.Router.Helpers.html#issue_url/4","title":"GitGud.Web.Router.Helpers.issue_url/4","type":"function"},{"doc":"","ref":"GitGud.Web.Router.Helpers.html#issue_url/5","title":"GitGud.Web.Router.Helpers.issue_url/5","type":"function"},{"doc":"","ref":"GitGud.Web.Router.Helpers.html#issue_url/6","title":"GitGud.Web.Router.Helpers.issue_url/6","type":"function"},{"doc":"","ref":"GitGud.Web.Router.Helpers.html#landing_page_path/2","title":"GitGud.Web.Router.Helpers.landing_page_path/2","type":"function"},{"doc":"","ref":"GitGud.Web.Router.Helpers.html#landing_page_path/3","title":"GitGud.Web.Router.Helpers.landing_page_path/3","type":"function"},{"doc":"","ref":"GitGud.Web.Router.Helpers.html#landing_page_url/2","title":"GitGud.Web.Router.Helpers.landing_page_url/2","type":"function"},{"doc":"","ref":"GitGud.Web.Router.Helpers.html#landing_page_url/3","title":"GitGud.Web.Router.Helpers.landing_page_url/3","type":"function"},{"doc":"","ref":"GitGud.Web.Router.Helpers.html#maintainer_path/4","title":"GitGud.Web.Router.Helpers.maintainer_path/4","type":"function"},{"doc":"","ref":"GitGud.Web.Router.Helpers.html#maintainer_path/5","title":"GitGud.Web.Router.Helpers.maintainer_path/5","type":"function"},{"doc":"","ref":"GitGud.Web.Router.Helpers.html#maintainer_url/4","title":"GitGud.Web.Router.Helpers.maintainer_url/4","type":"function"},{"doc":"","ref":"GitGud.Web.Router.Helpers.html#maintainer_url/5","title":"GitGud.Web.Router.Helpers.maintainer_url/5","type":"function"},{"doc":"","ref":"GitGud.Web.Router.Helpers.html#oauth2_path/2","title":"GitGud.Web.Router.Helpers.oauth2_path/2","type":"function"},{"doc":"","ref":"GitGud.Web.Router.Helpers.html#oauth2_path/3","title":"GitGud.Web.Router.Helpers.oauth2_path/3","type":"function"},{"doc":"","ref":"GitGud.Web.Router.Helpers.html#oauth2_path/4","title":"GitGud.Web.Router.Helpers.oauth2_path/4","type":"function"},{"doc":"","ref":"GitGud.Web.Router.Helpers.html#oauth2_url/2","title":"GitGud.Web.Router.Helpers.oauth2_url/2","type":"function"},{"doc":"","ref":"GitGud.Web.Router.Helpers.html#oauth2_url/3","title":"GitGud.Web.Router.Helpers.oauth2_url/3","type":"function"},{"doc":"","ref":"GitGud.Web.Router.Helpers.html#oauth2_url/4","title":"GitGud.Web.Router.Helpers.oauth2_url/4","type":"function"},{"doc":"Generates the path information including any necessary prefix.","ref":"GitGud.Web.Router.Helpers.html#path/2","title":"GitGud.Web.Router.Helpers.path/2","type":"function"},{"doc":"","ref":"GitGud.Web.Router.Helpers.html#repo_path/2","title":"GitGud.Web.Router.Helpers.repo_path/2","type":"function"},{"doc":"","ref":"GitGud.Web.Router.Helpers.html#repo_path/3","title":"GitGud.Web.Router.Helpers.repo_path/3","type":"function"},{"doc":"","ref":"GitGud.Web.Router.Helpers.html#repo_path/4","title":"GitGud.Web.Router.Helpers.repo_path/4","type":"function"},{"doc":"","ref":"GitGud.Web.Router.Helpers.html#repo_path/5","title":"GitGud.Web.Router.Helpers.repo_path/5","type":"function"},{"doc":"","ref":"GitGud.Web.Router.Helpers.html#repo_url/2","title":"GitGud.Web.Router.Helpers.repo_url/2","type":"function"},{"doc":"","ref":"GitGud.Web.Router.Helpers.html#repo_url/3","title":"GitGud.Web.Router.Helpers.repo_url/3","type":"function"},{"doc":"","ref":"GitGud.Web.Router.Helpers.html#repo_url/4","title":"GitGud.Web.Router.Helpers.repo_url/4","type":"function"},{"doc":"","ref":"GitGud.Web.Router.Helpers.html#repo_url/5","title":"GitGud.Web.Router.Helpers.repo_url/5","type":"function"},{"doc":"","ref":"GitGud.Web.Router.Helpers.html#session_path/2","title":"GitGud.Web.Router.Helpers.session_path/2","type":"function"},{"doc":"","ref":"GitGud.Web.Router.Helpers.html#session_path/3","title":"GitGud.Web.Router.Helpers.session_path/3","type":"function"},{"doc":"","ref":"GitGud.Web.Router.Helpers.html#session_url/2","title":"GitGud.Web.Router.Helpers.session_url/2","type":"function"},{"doc":"","ref":"GitGud.Web.Router.Helpers.html#session_url/3","title":"GitGud.Web.Router.Helpers.session_url/3","type":"function"},{"doc":"","ref":"GitGud.Web.Router.Helpers.html#smart_http_backend_path/4","title":"GitGud.Web.Router.Helpers.smart_http_backend_path/4","type":"function"},{"doc":"","ref":"GitGud.Web.Router.Helpers.html#smart_http_backend_path/5","title":"GitGud.Web.Router.Helpers.smart_http_backend_path/5","type":"function"},{"doc":"","ref":"GitGud.Web.Router.Helpers.html#smart_http_backend_url/4","title":"GitGud.Web.Router.Helpers.smart_http_backend_url/4","type":"function"},{"doc":"","ref":"GitGud.Web.Router.Helpers.html#smart_http_backend_url/5","title":"GitGud.Web.Router.Helpers.smart_http_backend_url/5","type":"function"},{"doc":"","ref":"GitGud.Web.Router.Helpers.html#ssh_key_path/2","title":"GitGud.Web.Router.Helpers.ssh_key_path/2","type":"function"},{"doc":"","ref":"GitGud.Web.Router.Helpers.html#ssh_key_path/3","title":"GitGud.Web.Router.Helpers.ssh_key_path/3","type":"function"},{"doc":"","ref":"GitGud.Web.Router.Helpers.html#ssh_key_url/2","title":"GitGud.Web.Router.Helpers.ssh_key_url/2","type":"function"},{"doc":"","ref":"GitGud.Web.Router.Helpers.html#ssh_key_url/3","title":"GitGud.Web.Router.Helpers.ssh_key_url/3","type":"function"},{"doc":"Generates an integrity hash to a static asset given its file path.","ref":"GitGud.Web.Router.Helpers.html#static_integrity/2","title":"GitGud.Web.Router.Helpers.static_integrity/2","type":"function"},{"doc":"Generates path to a static asset given its file path.","ref":"GitGud.Web.Router.Helpers.html#static_path/2","title":"GitGud.Web.Router.Helpers.static_path/2","type":"function"},{"doc":"Generates url to a static asset given its file path.","ref":"GitGud.Web.Router.Helpers.html#static_url/2","title":"GitGud.Web.Router.Helpers.static_url/2","type":"function"},{"doc":"Generates the connection/endpoint base URL without any path information.","ref":"GitGud.Web.Router.Helpers.html#url/1","title":"GitGud.Web.Router.Helpers.url/1","type":"function"},{"doc":"","ref":"GitGud.Web.Router.Helpers.html#user_path/2","title":"GitGud.Web.Router.Helpers.user_path/2","type":"function"},{"doc":"","ref":"GitGud.Web.Router.Helpers.html#user_path/3","title":"GitGud.Web.Router.Helpers.user_path/3","type":"function"},{"doc":"","ref":"GitGud.Web.Router.Helpers.html#user_path/4","title":"GitGud.Web.Router.Helpers.user_path/4","type":"function"},{"doc":"","ref":"GitGud.Web.Router.Helpers.html#user_url/2","title":"GitGud.Web.Router.Helpers.user_url/2","type":"function"},{"doc":"","ref":"GitGud.Web.Router.Helpers.html#user_url/3","title":"GitGud.Web.Router.Helpers.user_url/3","type":"function"},{"doc":"","ref":"GitGud.Web.Router.Helpers.html#user_url/4","title":"GitGud.Web.Router.Helpers.user_url/4","type":"function"},{"doc":"Module responsible for CRUD actions on GitGud.SSHKey .","ref":"GitGud.Web.SSHKeyController.html","title":"GitGud.Web.SSHKeyController","type":"module"},{"doc":"Creates a new SSH key.","ref":"GitGud.Web.SSHKeyController.html#create/2","title":"GitGud.Web.SSHKeyController.create/2","type":"function"},{"doc":"Deletes a SSH key.","ref":"GitGud.Web.SSHKeyController.html#delete/2","title":"GitGud.Web.SSHKeyController.delete/2","type":"function"},{"doc":"Renders SSH keys.","ref":"GitGud.Web.SSHKeyController.html#index/2","title":"GitGud.Web.SSHKeyController.index/2","type":"function"},{"doc":"Renders a creation form for SSH keys.","ref":"GitGud.Web.SSHKeyController.html#new/2","title":"GitGud.Web.SSHKeyController.new/2","type":"function"},{"doc":"Module responsible for user authentication.","ref":"GitGud.Web.SessionController.html","title":"GitGud.Web.SessionController","type":"module"},{"doc":"Authenticates user with credentials.","ref":"GitGud.Web.SessionController.html#create/2","title":"GitGud.Web.SessionController.create/2","type":"function"},{"doc":"Deletes user session.","ref":"GitGud.Web.SessionController.html#delete/2","title":"GitGud.Web.SessionController.delete/2","type":"function"},{"doc":"Renders the login page.","ref":"GitGud.Web.SessionController.html#new/2","title":"GitGud.Web.SessionController.new/2","type":"function"},{"doc":"Plug providing support for routes with trailing format.","ref":"GitGud.Web.TrailingFormatPlug.html","title":"GitGud.Web.TrailingFormatPlug","type":"module"},{"doc":"Live view responsible for rendering Git tree objects.","ref":"GitGud.Web.TreeBrowserLive.html","title":"GitGud.Web.TreeBrowserLive","type":"module"},{"doc":"Callback implementation for Phoenix.LiveView.render/1 .","ref":"GitGud.Web.TreeBrowserLive.html#render/1","title":"GitGud.Web.TreeBrowserLive.render/1","type":"function"},{"doc":"Module responsible for CRUD actions on GitGud.User .","ref":"GitGud.Web.UserController.html","title":"GitGud.Web.UserController","type":"module"},{"doc":"Creates a new user.","ref":"GitGud.Web.UserController.html#create/2","title":"GitGud.Web.UserController.create/2","type":"function"},{"doc":"Renders a password edit form.","ref":"GitGud.Web.UserController.html#edit_password/2","title":"GitGud.Web.UserController.edit_password/2","type":"function"},{"doc":"Renders a profile edit form.","ref":"GitGud.Web.UserController.html#edit_profile/2","title":"GitGud.Web.UserController.edit_profile/2","type":"function"},{"doc":"Renders the registration page.","ref":"GitGud.Web.UserController.html#new/2","title":"GitGud.Web.UserController.new/2","type":"function"},{"doc":"Renders a password reset form.","ref":"GitGud.Web.UserController.html#reset_password/2","title":"GitGud.Web.UserController.reset_password/2","type":"function"},{"doc":"Sends a password reset email.","ref":"GitGud.Web.UserController.html#send_password_reset/2","title":"GitGud.Web.UserController.send_password_reset/2","type":"function"},{"doc":"Renders a user.","ref":"GitGud.Web.UserController.html#show/2","title":"GitGud.Web.UserController.show/2","type":"function"},{"doc":"Updates a password.","ref":"GitGud.Web.UserController.html#update_password/2","title":"GitGud.Web.UserController.update_password/2","type":"function"},{"doc":"Updates a profile.","ref":"GitGud.Web.UserController.html#update_profile/2","title":"GitGud.Web.UserController.update_profile/2","type":"function"},{"doc":"Resets a password using a bearer token.","ref":"GitGud.Web.UserController.html#verify_password_reset/2","title":"GitGud.Web.UserController.verify_password_reset/2","type":"function"},{"doc":"Plug providing support for X-Forwared-For header.","ref":"GitGud.Web.XForwardedForPlug.html","title":"GitGud.Web.XForwardedForPlug","type":"module"},{"doc":"Behaviour for caching Git operations.","ref":"GitRekt.Cache.html","title":"GitRekt.Cache","type":"behaviour"},{"doc":"Fetches the value for a specific cache_key .","ref":"GitRekt.Cache.html#c:fetch_cache/2","title":"GitRekt.Cache.fetch_cache/2","type":"callback"},{"doc":"Initialize the cache for the given path .","ref":"GitRekt.Cache.html#c:init_cache/2","title":"GitRekt.Cache.init_cache/2","type":"callback"},{"doc":"Returns the cache key for the given op or nil if the operation should not be cached.","ref":"GitRekt.Cache.html#c:make_cache_key/1","title":"GitRekt.Cache.make_cache_key/1","type":"callback"},{"doc":"Puts the given cache_entry under cache_key .","ref":"GitRekt.Cache.html#c:put_cache/3","title":"GitRekt.Cache.put_cache/3","type":"callback"},{"doc":"","ref":"GitRekt.Cache.html#t:cache/0","title":"GitRekt.Cache.cache/0","type":"type"},{"doc":"","ref":"GitRekt.Cache.html#t:cache_entry/0","title":"GitRekt.Cache.cache_entry/0","type":"type"},{"doc":"","ref":"GitRekt.Cache.html#t:cache_key/0","title":"GitRekt.Cache.cache_key/0","type":"type"},{"doc":"","ref":"GitRekt.Cache.html#t:op/0","title":"GitRekt.Cache.op/0","type":"type"},{"doc":"Erlang NIF that exposes a subset of libgit2 's library functions. Most functions available in this module are implemented in C for performance reasons. These functions are compiled into a dynamic loadable, shared library. They are called like any other Elixir functions. As a NIF library is dynamically linked into the emulator process, this is the fastest way of calling C-code from Erlang (alongside port drivers). Calling NIFs requires no context switches. But it is also the least safe, because a crash in a NIF brings the emulator down too. Erlang documentation - NIFs Example Let's start with a basic code example showing the last commit author and message: alias GitRekt.Git # load repository { :ok , repo } = Git . repository_open ( &quot;/tmp/my-repo.git&quot; ) # fetch commit pointed by master { :ok , :commit , _oid , commit } = Git . reference_peel ( repo , &quot;refs/heads/master&quot; ) # fetch commit author &amp; message { :ok , name , email , time , _offset } = Git . commit_author ( commit ) { :ok , message } = Git . commit_message ( commit ) IO . puts &quot;Last commit by \#{ name } &lt; \#{ email } &gt;:&quot; IO . puts message First we open our repository using repository_open/1 , passing the path of the Git repository. We can fetch a commit by passing the exact reference path to reference_peel/2 . In our example, this allows us to retrieve the commit refs/heads/master is pointing to. This is one of many ways to fetch a given revision, reference_lookup/2 and reference_glob/2 offer similar functionalities. There are other related functions such as revparse_single/2 and revparse_ext/2 which provide support for parsing revspecs . Walk commit history In order to walk the commit ancestry chain, we have a few functions at our disposal: revwalk_new/1 , revwalk_push/2 , revwalk_next/1 , revwalk_reset/1 , etc. # create revision walk iterator { :ok , revwalk } = Git . revwalk_new ( repo ) # set root commit for traversal :ok = Git . revwalk_push ( walk , commit_oid ) # create (lazy) stream of ancestors from iterator { :ok , stream } = Git . revwalk_stream ( walk ) for ancestor_oid &lt;- stream do # fetch commit object { :ok , :commit , commit } = Git . object_lookup ( ancestor_oid ) # fetch commit message { :ok , message } = Git . commit_message ( commit ) IO . puts &quot; \#{ Git . oid_fmt_short ( ancestor_oid ) } - \#{ message } &quot; end In this example revwalk_new/1 returns a revwalk/0 , a mutable C-like iteratable object. This means that revwalk_push/2 mutates the revwalk object instead of returning a new object. The revwalk_stream/1 function converts the revwalk iterator to a Enumerable.t/0 we can then use to walk the commit ancestry chain. When iterating through a commit's history, revwalk_sorting/2 and revwalk_simplify_first_parent/1 provide conveniences for sorting and filtering while revwalk_push/3 can be used to hide specific commits. Retrieve blobs &amp; trees In order to access the actual files and directories of a repository, we have to retrieve the Git blob and tree objects of a given revision. Here we simply list files and folders at the root directory: # fetch commit tree { :ok , tree } = Git . commit_tree ( commit ) # fetch tree entries at / { :ok , tree_entries } = Git . tree_entries ( tree ) for { mode , type , oid , name } &lt;- tree_entries do # fetch tree entry object by oid (blob or tree) case Git . object_lookup ( repo , oid ) do { :ok , :blob , blob } -&gt; # fetch blob size { :ok , blob_size } = Git . blob_size ( blob ) IO . puts &quot; \#{ name } -- \#{ blob_size } bytes&quot; { :ok , :tree , tree } -&gt; # fetch number of sub entries { :ok , count } &lt;- Git . tree_count ( tree ) IO . puts &quot; \#{ name } / -- \#{ count } items&quot; end end Note that tree_entries/1 and tree_nth/2 return a tuple in the form of {mode, type, oid, name} . In order to call blob and tree specific functions such as blob_size/1 and tree_count/1 , we still need to lookup the Git object using object_lookup/2 . Here's an other example showing a convenient way to retrieve a tree entry by path: # fetch commit tree { :ok , tree } = Git . commit_tree ( commit ) # fetch blob by path { :ok , mode , :blob , oid , name } Git . tree_bypath ( tree , &quot;README.md&quot; ) # fetch blob object by oid { :ok , :blob , blob } = Git . object_lookup ( repo , oid ) # fetch blob content { :ok , data } = Git . blob_content ( blob ) IO . binwrite data Compare revisions Now that we know how to access files and directories, it might be interesting to determine the changes between two versions. In order to do so, we need to compare two tree objects from different revisions: # fetch tree for tag v1.2 { :ok , v1_2 , :commit , _oid } = Git . revparse_single ( repo , &quot;v1.2&quot; ) { :ok , v1_2_tree } = Git . commit_tree ( v1_2 ) # fetch tree for tag v1.3 { :ok , v1_3 , :commit , _oid } = Git . revparse_single ( repo , &quot;v1.3&quot; ) { :ok , v1_3_tree } = Git . commit_tree ( v1_3 ) # fetch diff between v1.2 and v1.3 { :ok , diff } = Git . diff_tree ( repo , v1_2_tree , v1_3_tree ) # format diff to string { :ok , patch } = Git . diff_format ( diff , :patch ) IO . puts patch Note that diff_tree/4 takes options such as :pathspec allowing to filter changes based on a given path. For example, we might want to see the different between two revision for a specific file. In this case we could modify the above example as follow to print changes affecting README.md : # fetch diff between v1.2 and v1.3 for README.md { :ok , diff } = Git . diff_tree ( repo , v1_2_tree , v1_3_tree , pathspec : &quot;README.md&quot; ) # format diff to string { :ok , patch } = Git . diff_format ( diff , :patch ) IO . puts patch Commit changes Committing changes to a repository is done in a serie of distinct steps. First, we add a new blob object to the repository: # Blob content blob_content = &quot;Hello world \\n &quot; # Open repository ODB { :ok , odb } = Git . repository_get_odb ( repo ) # Write new blob object { :ok , blob_oid } = Git . odb_write ( odb , blob_content , :blob ) We create an in-memory index to stage our modifications (an index is a list of path names, each with permissions and the SHA1 of a blob object). In order to create a new tree object reflecting our changes, we have to assign our new blob object at a given path in the index and write the index back to the repository: # Blob path blob_path = &quot;README&quot; # Create new index { :ok , index } = Git . index_new ( ) # Read last commit tree into index :ok = Git . index_read_tree ( index , tree ) # Add newly added blob object to index :ok = Git . index_add ( repo , index , blob_oid , blob_path , byte_size ( blob_content ) , 0o100644 ) # Write index { :ok , tree_oid } = Git . index_write_tree ( index ) The repository now contains a new blob object and a new tree object reflecting our changes. We now have all the ingredients for creating a commit and update the master branch accordingly: # Commit message commit_message = &quot;Add README&quot; # Fetch repository default signature for authoring and committing { :ok , sig_name , sig_email , sig_ts , sig_tz } = Git . signature_default ( repo ) commit_author = { sig_name , sig_email , sig_ts , sig_tz } commit_committer = commit_author # Fetch reference to update { :ok , :commit , parent_oid , _parent } = Git . reference_peel ( repo , &quot;refs/heads/master&quot; ) # Create new commit { :ok , commit_oid } = Git . commit_create ( repo , :undefined , commit_author , commit_committer , :undefined , commit_message , tree_oid , [ parent_oid ] ) # Update master branch to new commit :ok = Git . reference_create ( repo , &quot;refs/heads/master&quot; , :oid , commit_oid ) IO . puts &quot;File \#{ blob_path } added in commit \#{ Git . oid_fmt ( commit_oid ) } .&quot; We have created a commit pointing at the new tree object. The commit refers the newly created tree and requires two user signatures (author and committer), a commit message and the commit ancestor(s). Finally we have updated the master branch to point at our new commit. Thread safety Accessing a repo/0 or any NIF allocated pointer ( blob/0 , commit/0 , config/0 , etc.) from multiple processes simultaneously is not safe. These pointers should never be shared across processes. In order to access a repository in a concurrent manner, each process has to initialize it's own repository resource using repository_open/1 . Alternatively, the GitRekt.GitAgent module provides a similar API but can use a dedicated process, so that its access can be serialized.","ref":"GitRekt.Git.html","title":"GitRekt.Git","type":"module"},{"doc":"Returns the raw content of the given blob .","ref":"GitRekt.Git.html#blob_content/1","title":"GitRekt.Git.blob_content/1","type":"function"},{"doc":"Returns the size in bytes of the given blob .","ref":"GitRekt.Git.html#blob_size/1","title":"GitRekt.Git.blob_size/1","type":"function"},{"doc":"Returns the author of the given commit .","ref":"GitRekt.Git.html#commit_author/1","title":"GitRekt.Git.commit_author/1","type":"function"},{"doc":"Returns the committer of the given commit .","ref":"GitRekt.Git.html#commit_committer/1","title":"GitRekt.Git.commit_committer/1","type":"function"},{"doc":"Creates a new commit with the given params.","ref":"GitRekt.Git.html#commit_create/8","title":"GitRekt.Git.commit_create/8","type":"function"},{"doc":"Returns an arbitrary header field of the given commit .","ref":"GitRekt.Git.html#commit_header/2","title":"GitRekt.Git.commit_header/2","type":"function"},{"doc":"Returns the message for the given commit .","ref":"GitRekt.Git.html#commit_message/1","title":"GitRekt.Git.commit_message/1","type":"function"},{"doc":"Looks for a parent commit of the given commit by its index .","ref":"GitRekt.Git.html#commit_parent/2","title":"GitRekt.Git.commit_parent/2","type":"function"},{"doc":"Returns the number of parents for the given commit .","ref":"GitRekt.Git.html#commit_parent_count/1","title":"GitRekt.Git.commit_parent_count/1","type":"function"},{"doc":"Returns parent commits of the given commit .","ref":"GitRekt.Git.html#commit_parents/1","title":"GitRekt.Git.commit_parents/1","type":"function"},{"doc":"Returns the full raw header of the given commit .","ref":"GitRekt.Git.html#commit_raw_header/1","title":"GitRekt.Git.commit_raw_header/1","type":"function"},{"doc":"Returns the time of the given commit .","ref":"GitRekt.Git.html#commit_time/1","title":"GitRekt.Git.commit_time/1","type":"function"},{"doc":"Returns the tree for the given commit .","ref":"GitRekt.Git.html#commit_tree/1","title":"GitRekt.Git.commit_tree/1","type":"function"},{"doc":"Returns the tree id for the given commit .","ref":"GitRekt.Git.html#commit_tree_id/1","title":"GitRekt.Git.commit_tree_id/1","type":"function"},{"doc":"Returns the value of the config entry with the given name .","ref":"GitRekt.Git.html#config_get_bool/2","title":"GitRekt.Git.config_get_bool/2","type":"function"},{"doc":"Returns the value of the config entry with the given name .","ref":"GitRekt.Git.html#config_get_string/2","title":"GitRekt.Git.config_get_string/2","type":"function"},{"doc":"Returns a config handle for the given path .","ref":"GitRekt.Git.html#config_open/1","title":"GitRekt.Git.config_open/1","type":"function"},{"doc":"Sets the config entry with the given name to val .","ref":"GitRekt.Git.html#config_set_bool/3","title":"GitRekt.Git.config_set_bool/3","type":"function"},{"doc":"Sets the config entry with the given name to val .","ref":"GitRekt.Git.html#config_set_string/3","title":"GitRekt.Git.config_set_string/3","type":"function"},{"doc":"Returns the number of deltas in the given diff .","ref":"GitRekt.Git.html#diff_delta_count/1","title":"GitRekt.Git.diff_delta_count/1","type":"function"},{"doc":"Returns a list of deltas for the given diff .","ref":"GitRekt.Git.html#diff_deltas/1","title":"GitRekt.Git.diff_deltas/1","type":"function"},{"doc":"Returns a binary represention of the given diff .","ref":"GitRekt.Git.html#diff_format/2","title":"GitRekt.Git.diff_format/2","type":"function"},{"doc":"Returns stats for the given diff .","ref":"GitRekt.Git.html#diff_stats/1","title":"GitRekt.Git.diff_stats/1","type":"function"},{"doc":"Returns a diff with the difference between two tree objects.","ref":"GitRekt.Git.html#diff_tree/4","title":"GitRekt.Git.diff_tree/4","type":"function"},{"doc":"Returns the number of unique commits between two commit objects.","ref":"GitRekt.Git.html#graph_ahead_behind/3","title":"GitRekt.Git.graph_ahead_behind/3","type":"function"},{"doc":"Adds or updates the given entry .","ref":"GitRekt.Git.html#index_add/2","title":"GitRekt.Git.index_add/2","type":"function"},{"doc":"Retrieves an entry contained in the index given its relative path.","ref":"GitRekt.Git.html#index_bypath/3","title":"GitRekt.Git.index_bypath/3","type":"function"},{"doc":"Clears the contents (all the entries) of the given index .","ref":"GitRekt.Git.html#index_clear/1","title":"GitRekt.Git.index_clear/1","type":"function"},{"doc":"Returns the number of entries in the given index .","ref":"GitRekt.Git.html#index_count/1","title":"GitRekt.Git.index_count/1","type":"function"},{"doc":"Creates an new in-memory index object.","ref":"GitRekt.Git.html#index_new/0","title":"GitRekt.Git.index_new/0","type":"function"},{"doc":"Looks for an entry by its position in the given index .","ref":"GitRekt.Git.html#index_nth/2","title":"GitRekt.Git.index_nth/2","type":"function"},{"doc":"Reads the given tree into the given index file with stats.","ref":"GitRekt.Git.html#index_read_tree/2","title":"GitRekt.Git.index_read_tree/2","type":"function"},{"doc":"Removes an entry from the given index .","ref":"GitRekt.Git.html#index_remove/3","title":"GitRekt.Git.index_remove/3","type":"function"},{"doc":"Removes all entries from the given index under a given directory.","ref":"GitRekt.Git.html#index_remove_dir/3","title":"GitRekt.Git.index_remove_dir/3","type":"function"},{"doc":"Writes the given index from memory back to disk using an atomic file lock.","ref":"GitRekt.Git.html#index_write/1","title":"GitRekt.Git.index_write/1","type":"function"},{"doc":"Writes the given index as a tree.","ref":"GitRekt.Git.html#index_write_tree/1","title":"GitRekt.Git.index_write_tree/1","type":"function"},{"doc":"Writes the given index as a tree.","ref":"GitRekt.Git.html#index_write_tree/2","title":"GitRekt.Git.index_write_tree/2","type":"function"},{"doc":"Returns the libgit2 library version.","ref":"GitRekt.Git.html#library_version/0","title":"GitRekt.Git.library_version/0","type":"function"},{"doc":"Returns the OID for the given obj .","ref":"GitRekt.Git.html#object_id/1","title":"GitRekt.Git.object_id/1","type":"function"},{"doc":"Looks for an object with the given oid .","ref":"GitRekt.Git.html#object_lookup/2","title":"GitRekt.Git.object_lookup/2","type":"function"},{"doc":"Returns the repository that owns the given obj .","ref":"GitRekt.Git.html#object_repository/1","title":"GitRekt.Git.object_repository/1","type":"function"},{"doc":"Inflates the given data with zlib .","ref":"GitRekt.Git.html#object_zlib_inflate/2","title":"GitRekt.Git.object_zlib_inflate/2","type":"function"},{"doc":"Returns an ODB write-pack for the given odb .","ref":"GitRekt.Git.html#odb_get_writepack/1","title":"GitRekt.Git.odb_get_writepack/1","type":"function"},{"doc":"Returns true if the given oid exists in odb ; elsewise returns false .","ref":"GitRekt.Git.html#odb_object_exists?/2","title":"GitRekt.Git.odb_object_exists?/2","type":"function"},{"doc":"Returns the OID of an object type and raw data . The resulting SHA-1 OID will be the identifier for the data buffer as if the data buffer it were to written to the ODB.","ref":"GitRekt.Git.html#odb_object_hash/2","title":"GitRekt.Git.odb_object_hash/2","type":"function"},{"doc":"Return the uncompressed, raw data of an ODB object.","ref":"GitRekt.Git.html#odb_read/2","title":"GitRekt.Git.odb_read/2","type":"function"},{"doc":"Writes the given object data with the given type into the odb .","ref":"GitRekt.Git.html#odb_write/3","title":"GitRekt.Git.odb_write/3","type":"function"},{"doc":"Writes the given PACK data into the odb .","ref":"GitRekt.Git.html#odb_write_pack/2","title":"GitRekt.Git.odb_write_pack/2","type":"function"},{"doc":"Appends the given data to the odb_writepack .","ref":"GitRekt.Git.html#odb_writepack_append/3","title":"GitRekt.Git.odb_writepack_append/3","type":"function"},{"doc":"Commits the written data to the odb_writepack .","ref":"GitRekt.Git.html#odb_writepack_commit/2","title":"GitRekt.Git.odb_writepack_commit/2","type":"function"},{"doc":"Returns the SHA hash for the given oid .","ref":"GitRekt.Git.html#oid_fmt/1","title":"GitRekt.Git.oid_fmt/1","type":"function"},{"doc":"Returns the abbreviated SHA hash for the given oid .","ref":"GitRekt.Git.html#oid_fmt_short/1","title":"GitRekt.Git.oid_fmt_short/1","type":"function"},{"doc":"Returns the OID for the given SHA hash .","ref":"GitRekt.Git.html#oid_parse/1","title":"GitRekt.Git.oid_parse/1","type":"function"},{"doc":"Returns a PACK file for the given pack .","ref":"GitRekt.Git.html#pack_data/1","title":"GitRekt.Git.pack_data/1","type":"function"},{"doc":"Inserts commit as well as the completed referenced tree.","ref":"GitRekt.Git.html#pack_insert_commit/2","title":"GitRekt.Git.pack_insert_commit/2","type":"function"},{"doc":"Inserts objects as given by the walk .","ref":"GitRekt.Git.html#pack_insert_walk/2","title":"GitRekt.Git.pack_insert_walk/2","type":"function"},{"doc":"Creates a new PACK object for the given repo .","ref":"GitRekt.Git.html#pack_new/1","title":"GitRekt.Git.pack_new/1","type":"function"},{"doc":"Returns true if tree matches the given pathspec ; otherwise returns false .","ref":"GitRekt.Git.html#pathspec_match_tree/2","title":"GitRekt.Git.pathspec_match_tree/2","type":"function"},{"doc":"Creates a new reference name which points to an object or to an other reference.","ref":"GitRekt.Git.html#reference_create/5","title":"GitRekt.Git.reference_create/5","type":"function"},{"doc":"Deletes an existing reference.","ref":"GitRekt.Git.html#reference_delete/2","title":"GitRekt.Git.reference_delete/2","type":"function"},{"doc":"Looks for a reference by DWIMing its short_name .","ref":"GitRekt.Git.html#reference_dwim/2","title":"GitRekt.Git.reference_dwim/2","type":"function"},{"doc":"Similar to reference_list/1 but allows glob patterns.","ref":"GitRekt.Git.html#reference_glob/2","title":"GitRekt.Git.reference_glob/2","type":"function"},{"doc":"Returns an iterator for the references that match the specific glob pattern.","ref":"GitRekt.Git.html#reference_iterator/2","title":"GitRekt.Git.reference_iterator/2","type":"function"},{"doc":"Returns all references for the given repo .","ref":"GitRekt.Git.html#reference_list/1","title":"GitRekt.Git.reference_list/1","type":"function"},{"doc":"Returns true if a reflog exists for the given reference name .","ref":"GitRekt.Git.html#reference_log?/2","title":"GitRekt.Git.reference_log?/2","type":"function"},{"doc":"Looks for a reference by name .","ref":"GitRekt.Git.html#reference_lookup/2","title":"GitRekt.Git.reference_lookup/2","type":"function"},{"doc":"Returns the next reference.","ref":"GitRekt.Git.html#reference_next/1","title":"GitRekt.Git.reference_next/1","type":"function"},{"doc":"Recursively peels the given reference name until an object of type type is found.","ref":"GitRekt.Git.html#reference_peel/3","title":"GitRekt.Git.reference_peel/3","type":"function"},{"doc":"Resolves a symbolic reference to a direct reference.","ref":"GitRekt.Git.html#reference_resolve/2","title":"GitRekt.Git.reference_resolve/2","type":"function"},{"doc":"Returns a stream for the references that match the specific glob pattern.","ref":"GitRekt.Git.html#reference_stream/2","title":"GitRekt.Git.reference_stream/2","type":"function"},{"doc":"Looks for a reference by name and returns its id.","ref":"GitRekt.Git.html#reference_to_id/2","title":"GitRekt.Git.reference_to_id/2","type":"function"},{"doc":"Reads the number of entry for the given reflog name .","ref":"GitRekt.Git.html#reflog_count/2","title":"GitRekt.Git.reflog_count/2","type":"function"},{"doc":"Deletes the reflog for the given reference name .","ref":"GitRekt.Git.html#reflog_delete/2","title":"GitRekt.Git.reflog_delete/2","type":"function"},{"doc":"Reads the reflog for the given reference name .","ref":"GitRekt.Git.html#reflog_read/2","title":"GitRekt.Git.reflog_read/2","type":"function"},{"doc":"Returns true if repo is bare; elsewise returns false .","ref":"GitRekt.Git.html#repository_bare?/1","title":"GitRekt.Git.repository_bare?/1","type":"function"},{"doc":"Looks for a repository and returns its path.","ref":"GitRekt.Git.html#repository_discover/1","title":"GitRekt.Git.repository_discover/1","type":"function"},{"doc":"Returns true if repo is empty; elsewise returns false .","ref":"GitRekt.Git.html#repository_empty?/1","title":"GitRekt.Git.repository_empty?/1","type":"function"},{"doc":"Returns the config for the given repo .","ref":"GitRekt.Git.html#repository_get_config/1","title":"GitRekt.Git.repository_get_config/1","type":"function"},{"doc":"Returns the index for the given repository .","ref":"GitRekt.Git.html#repository_get_index/1","title":"GitRekt.Git.repository_get_index/1","type":"function"},{"doc":"Returns the ODB for the given repository .","ref":"GitRekt.Git.html#repository_get_odb/1","title":"GitRekt.Git.repository_get_odb/1","type":"function"},{"doc":"Returns the absolute path for the given repo .","ref":"GitRekt.Git.html#repository_get_path/1","title":"GitRekt.Git.repository_get_path/1","type":"function"},{"doc":"Returns the normalized path to the working directory for the given repo .","ref":"GitRekt.Git.html#repository_get_workdir/1","title":"GitRekt.Git.repository_get_workdir/1","type":"function"},{"doc":"Initializes a new repository at the given path .","ref":"GitRekt.Git.html#repository_init/2","title":"GitRekt.Git.repository_init/2","type":"function"},{"doc":"Returns a repository handle for the path .","ref":"GitRekt.Git.html#repository_open/1","title":"GitRekt.Git.repository_open/1","type":"function"},{"doc":"Finds a single object and intermediate reference, as specified by the given revision .","ref":"GitRekt.Git.html#revparse_ext/2","title":"GitRekt.Git.revparse_ext/2","type":"function"},{"doc":"Finds a single object, as specified by the given revision .","ref":"GitRekt.Git.html#revparse_single/2","title":"GitRekt.Git.revparse_single/2","type":"function"},{"doc":"Creates a new revision walk object for the given repo .","ref":"GitRekt.Git.html#revwalk_new/1","title":"GitRekt.Git.revwalk_new/1","type":"function"},{"doc":"Returns the next commit from the given revision walk .","ref":"GitRekt.Git.html#revwalk_next/1","title":"GitRekt.Git.revwalk_next/1","type":"function"},{"doc":"Returns a PACK file for the given walk .","ref":"GitRekt.Git.html#revwalk_pack/1","title":"GitRekt.Git.revwalk_pack/1","type":"function"},{"doc":"Adds a new root for the traversal.","ref":"GitRekt.Git.html#revwalk_push/3","title":"GitRekt.Git.revwalk_push/3","type":"function"},{"doc":"Returns the repository on which the given walker is operating.","ref":"GitRekt.Git.html#revwalk_repository/1","title":"GitRekt.Git.revwalk_repository/1","type":"function"},{"doc":"Resets the revision walk for reuse.","ref":"GitRekt.Git.html#revwalk_reset/1","title":"GitRekt.Git.revwalk_reset/1","type":"function"},{"doc":"Simplifies the history by first-parent.","ref":"GitRekt.Git.html#revwalk_simplify_first_parent/1","title":"GitRekt.Git.revwalk_simplify_first_parent/1","type":"function"},{"doc":"Changes the sorting mode when iterating through the repository's contents.","ref":"GitRekt.Git.html#revwalk_sorting/2","title":"GitRekt.Git.revwalk_sorting/2","type":"function"},{"doc":"Returns a stream for the given revision walk .","ref":"GitRekt.Git.html#revwalk_stream/1","title":"GitRekt.Git.revwalk_stream/1","type":"function"},{"doc":"Returns the default signature for the given repo .","ref":"GitRekt.Git.html#signature_default/1","title":"GitRekt.Git.signature_default/1","type":"function"},{"doc":"Creates a new signature with the given name and email .","ref":"GitRekt.Git.html#signature_new/2","title":"GitRekt.Git.signature_new/2","type":"function"},{"doc":"Creates a new signature with the given name , email and time .","ref":"GitRekt.Git.html#signature_new/3","title":"GitRekt.Git.signature_new/3","type":"function"},{"doc":"Returns the author of the given tag .","ref":"GitRekt.Git.html#tag_author/1","title":"GitRekt.Git.tag_author/1","type":"function"},{"doc":"Returns all tags for the given repo .","ref":"GitRekt.Git.html#tag_list/1","title":"GitRekt.Git.tag_list/1","type":"function"},{"doc":"Returns the message of the given tag .","ref":"GitRekt.Git.html#tag_message/1","title":"GitRekt.Git.tag_message/1","type":"function"},{"doc":"Returns the name of the given tag .","ref":"GitRekt.Git.html#tag_name/1","title":"GitRekt.Git.tag_name/1","type":"function"},{"doc":"Recursively peels the given tag until a non tag object is found.","ref":"GitRekt.Git.html#tag_peel/1","title":"GitRekt.Git.tag_peel/1","type":"function"},{"doc":"Retrieves a tree entry owned by the given tree , given its id.","ref":"GitRekt.Git.html#tree_byid/2","title":"GitRekt.Git.tree_byid/2","type":"function"},{"doc":"Retrieves a tree entry contained in the given tree or in any of its subtrees, given its relative path.","ref":"GitRekt.Git.html#tree_bypath/2","title":"GitRekt.Git.tree_bypath/2","type":"function"},{"doc":"Returns the number of entries listed in the given tree .","ref":"GitRekt.Git.html#tree_count/1","title":"GitRekt.Git.tree_count/1","type":"function"},{"doc":"Returns all entries in the given tree .","ref":"GitRekt.Git.html#tree_entries/1","title":"GitRekt.Git.tree_entries/1","type":"function"},{"doc":"Looks for a tree entry by its position in the given tree .","ref":"GitRekt.Git.html#tree_nth/2","title":"GitRekt.Git.tree_nth/2","type":"function"},{"doc":"Adds a new working tree for the given repo","ref":"GitRekt.Git.html#worktree_add/4","title":"GitRekt.Git.worktree_add/4","type":"function"},{"doc":"Prunes a working tree.","ref":"GitRekt.Git.html#worktree_prune/1","title":"GitRekt.Git.worktree_prune/1","type":"function"},{"doc":"","ref":"GitRekt.Git.html#t:blob/0","title":"GitRekt.Git.blob/0","type":"type"},{"doc":"","ref":"GitRekt.Git.html#t:commit/0","title":"GitRekt.Git.commit/0","type":"type"},{"doc":"","ref":"GitRekt.Git.html#t:config/0","title":"GitRekt.Git.config/0","type":"type"},{"doc":"","ref":"GitRekt.Git.html#t:diff/0","title":"GitRekt.Git.diff/0","type":"type"},{"doc":"","ref":"GitRekt.Git.html#t:diff_delta/0","title":"GitRekt.Git.diff_delta/0","type":"type"},{"doc":"","ref":"GitRekt.Git.html#t:diff_file/0","title":"GitRekt.Git.diff_file/0","type":"type"},{"doc":"","ref":"GitRekt.Git.html#t:diff_format/0","title":"GitRekt.Git.diff_format/0","type":"type"},{"doc":"","ref":"GitRekt.Git.html#t:diff_hunk/0","title":"GitRekt.Git.diff_hunk/0","type":"type"},{"doc":"","ref":"GitRekt.Git.html#t:diff_line/0","title":"GitRekt.Git.diff_line/0","type":"type"},{"doc":"","ref":"GitRekt.Git.html#t:index/0","title":"GitRekt.Git.index/0","type":"type"},{"doc":"","ref":"GitRekt.Git.html#t:index_entry/0","title":"GitRekt.Git.index_entry/0","type":"type"},{"doc":"","ref":"GitRekt.Git.html#t:indexer_progress/0","title":"GitRekt.Git.indexer_progress/0","type":"type"},{"doc":"","ref":"GitRekt.Git.html#t:obj/0","title":"GitRekt.Git.obj/0","type":"type"},{"doc":"","ref":"GitRekt.Git.html#t:obj_type/0","title":"GitRekt.Git.obj_type/0","type":"type"},{"doc":"","ref":"GitRekt.Git.html#t:odb/0","title":"GitRekt.Git.odb/0","type":"type"},{"doc":"","ref":"GitRekt.Git.html#t:odb_type/0","title":"GitRekt.Git.odb_type/0","type":"type"},{"doc":"","ref":"GitRekt.Git.html#t:odb_writepack/0","title":"GitRekt.Git.odb_writepack/0","type":"type"},{"doc":"","ref":"GitRekt.Git.html#t:odb_writepack_progress/0","title":"GitRekt.Git.odb_writepack_progress/0","type":"type"},{"doc":"","ref":"GitRekt.Git.html#t:oid/0","title":"GitRekt.Git.oid/0","type":"type"},{"doc":"","ref":"GitRekt.Git.html#t:pack/0","title":"GitRekt.Git.pack/0","type":"type"},{"doc":"","ref":"GitRekt.Git.html#t:ref_iter/0","title":"GitRekt.Git.ref_iter/0","type":"type"},{"doc":"","ref":"GitRekt.Git.html#t:ref_type/0","title":"GitRekt.Git.ref_type/0","type":"type"},{"doc":"","ref":"GitRekt.Git.html#t:reflog_entry/0","title":"GitRekt.Git.reflog_entry/0","type":"type"},{"doc":"","ref":"GitRekt.Git.html#t:repo/0","title":"GitRekt.Git.repo/0","type":"type"},{"doc":"","ref":"GitRekt.Git.html#t:revwalk/0","title":"GitRekt.Git.revwalk/0","type":"type"},{"doc":"","ref":"GitRekt.Git.html#t:revwalk_sort/0","title":"GitRekt.Git.revwalk_sort/0","type":"type"},{"doc":"","ref":"GitRekt.Git.html#t:signature/0","title":"GitRekt.Git.signature/0","type":"type"},{"doc":"","ref":"GitRekt.Git.html#t:tag/0","title":"GitRekt.Git.tag/0","type":"type"},{"doc":"","ref":"GitRekt.Git.html#t:tree/0","title":"GitRekt.Git.tree/0","type":"type"},{"doc":"","ref":"GitRekt.Git.html#t:tree_entry/0","title":"GitRekt.Git.tree_entry/0","type":"type"},{"doc":"","ref":"GitRekt.Git.html#t:worktree/0","title":"GitRekt.Git.worktree/0","type":"type"},{"doc":"High-level API for running Git commands on a repository. This module provides an API to manipulate Git repositories. In contrast to GitRekt.Git , it offers an abstraction for serializing Git commands via message passing. By doing so it allows multiple processes to manipulate a single repository simultaneously (see “Thread safety” in GitRekt.Git module). At it core GitRekt.GitAgent implements GenServer . Therefore it makes it easy to fit into a supervision tree and furthermore, in a distributed environment. An other major benefit is support for caching command results. In their nature Git objects are immutable; that is, once they have been created and stored in the data store, they cannot be modified. This allows for very naive caching strategy implementations without having to deal with cache invalidation. Example Let's start by rewriting the example exposed in the GitRekt.Git module: alias GitRekt.GitAgent # load repository { :ok , agent } = GitAgent . start_link ( &quot;tmp/my-repo.git&quot; ) # fetch master branch { :ok , branch } = GitAgent . branch ( agent , &quot;master&quot; ) # fetch commit pointed by master { :ok , commit } = GitAgent . peel ( agent , branch ) # fetch commit author &amp; message { :ok , author } = GitAgent . commit_author ( agent , commit ) { :ok , message } = GitAgent . commit_message ( agent , commit ) IO . puts &quot;Last commit by \#{ author . name } &lt; \#{ author . email } &gt;:&quot; IO . puts message This look very similar to the original example altought the API slightly differs. You might have noticed that the first argument of each Git function is agent . In our example the agent is a PID referencing a dedicated process started with start_link/1 . Note that replacing start_link/1 with GitRekt.Git.repository_open/1 would print the exact same output. This works because agent/0 can be either a process id (PID) or a GitRekt.Git.repo/0 . Transactions You can execute a serie of commands inside a transaction. In the following example, we use transaction/2 to retrieve all informations for a given commit: GitAgent . transaction ( agent , fn agent -&gt; with { :ok , author } &lt;- GitAgent . commit_author ( agent , commit ) , { :ok , committer } &lt;- GitAgent . commit_committer ( agent , commit ) , { :ok , message } &lt;- GitAgent . commit_message ( agent , commit ) , { :ok , parents } &lt;- GitAgent . commit_parents ( agent , commit ) , { :ok , timestamp } &lt;- GitAgent . commit_timestamp ( agent , commit ) , { :ok , gpg_sig } &lt;- GitAgent . commit_gpg_signature ( agent , commit ) do { :ok , %{ oid : commit . oid , author : author , committer : committer , message : message , parents : Enum . to_list ( parents ) , timestamp : timestamp , gpg_sig : gpg_sig } } end end ) Transactions provide a simple entry point for implementing more complex commands. The function is executed by the agent in a single request; avoiding the costs of making six consecutive GenServer.call/3 . You can also use transactions to cache the result of a serie of commands. Let's wrap our previous example in a function and give the transaction an unique identifier. def commit_info ( agent , commit ) do # identifier: {:commit_info, oid} GitAgent . transaction ( agent , { :commit_info , commit . oid } , fn agent -&gt; ... end ) end By using a unique identifier, we tell GitRekt.GitAgent that the result of our function should be cached. Here's the log output for two consecutive commit_info/2 calls: [debug] [Git Agent] transaction(:commit_info, &quot;b662d32&quot;) executed in 361 µs [debug] [Git Agent] &gt; commit_author(&lt;GitCommit:b662d32&gt;) executed in 6 µs [debug] [Git Agent] &gt; commit_committer(&lt;GitCommit:b662d32&gt;) executed in 5 µs [debug] [Git Agent] &gt; commit_message(&lt;GitCommit:b662d32&gt;) executed in 1 µs [debug] [Git Agent] &gt; commit_parents(&lt;GitCommit:b662d32&gt;) executed in 4 µs [debug] [Git Agent] &gt; commit_timestamp(&lt;GitCommit:b662d32&gt;) executed in 11 µs [debug] [Git Agent] &gt; commit_gpg_signature(&lt;GitCommit:b662d32&gt;) executed in 6 µs [debug] [Git Agent] transaction(:commit_info, &quot;b662d32&quot;) executed in ⚡ 3 µs We can observe that the first call executes the different commands one by one and cache the result while the second one fetches the result directly from the cache without having to actually run the transaction. Note that transaction/3 can be called recursively and still benefit from caching.","ref":"GitRekt.GitAgent.html","title":"GitRekt.GitAgent","type":"module"},{"doc":"Returns the content of the given blob .","ref":"GitRekt.GitAgent.html#blob_content/3","title":"GitRekt.GitAgent.blob_content/3","type":"function"},{"doc":"Returns the size in byte of the given blob .","ref":"GitRekt.GitAgent.html#blob_size/3","title":"GitRekt.GitAgent.blob_size/3","type":"function"},{"doc":"Returns the Git branch with the given name .","ref":"GitRekt.GitAgent.html#branch/3","title":"GitRekt.GitAgent.branch/3","type":"function"},{"doc":"Returns all Git branches.","ref":"GitRekt.GitAgent.html#branches/2","title":"GitRekt.GitAgent.branches/2","type":"function"},{"doc":"Returns a specification to start this module under a supervisor. See Supervisor .","ref":"GitRekt.GitAgent.html#child_spec/1","title":"GitRekt.GitAgent.child_spec/1","type":"function"},{"doc":"Returns the author of the given commit .","ref":"GitRekt.GitAgent.html#commit_author/3","title":"GitRekt.GitAgent.commit_author/3","type":"function"},{"doc":"Returns the committer of the given commit .","ref":"GitRekt.GitAgent.html#commit_committer/3","title":"GitRekt.GitAgent.commit_committer/3","type":"function"},{"doc":"Creates a commit with the given tree_oid and parents_oid .","ref":"GitRekt.GitAgent.html#commit_create/7","title":"GitRekt.GitAgent.commit_create/7","type":"function"},{"doc":"Returns the GPG signature of the given commit .","ref":"GitRekt.GitAgent.html#commit_gpg_signature/3","title":"GitRekt.GitAgent.commit_gpg_signature/3","type":"function"},{"doc":"Returns the message of the given commit .","ref":"GitRekt.GitAgent.html#commit_message/3","title":"GitRekt.GitAgent.commit_message/3","type":"function"},{"doc":"Returns the parent of the given commit .","ref":"GitRekt.GitAgent.html#commit_parents/3","title":"GitRekt.GitAgent.commit_parents/3","type":"function"},{"doc":"Returns the timestamp of the given commit .","ref":"GitRekt.GitAgent.html#commit_timestamp/3","title":"GitRekt.GitAgent.commit_timestamp/3","type":"function"},{"doc":"Returns the Git diff of obj1 and obj2 .","ref":"GitRekt.GitAgent.html#diff/4","title":"GitRekt.GitAgent.diff/4","type":"function"},{"doc":"Returns the deltas of the given diff .","ref":"GitRekt.GitAgent.html#diff_deltas/3","title":"GitRekt.GitAgent.diff_deltas/3","type":"function"},{"doc":"Returns a binary formated representation of the given diff .","ref":"GitRekt.GitAgent.html#diff_format/3","title":"GitRekt.GitAgent.diff_format/3","type":"function"},{"doc":"Returns the stats of the given diff .","ref":"GitRekt.GitAgent.html#diff_stats/3","title":"GitRekt.GitAgent.diff_stats/3","type":"function"},{"doc":"Returns true if the repository is empty; otherwise returns false .","ref":"GitRekt.GitAgent.html#empty?/2","title":"GitRekt.GitAgent.empty?/2","type":"function"},{"doc":"Returns the number of unique commits between two commit objects.","ref":"GitRekt.GitAgent.html#graph_ahead_behind/4","title":"GitRekt.GitAgent.graph_ahead_behind/4","type":"function"},{"doc":"Returns the Git reference for HEAD .","ref":"GitRekt.GitAgent.html#head/2","title":"GitRekt.GitAgent.head/2","type":"function"},{"doc":"Returns the Git commit history of the given revision .","ref":"GitRekt.GitAgent.html#history/3","title":"GitRekt.GitAgent.history/3","type":"function"},{"doc":"Returns the Git index of the repository.","ref":"GitRekt.GitAgent.html#index/2","title":"GitRekt.GitAgent.index/2","type":"function"},{"doc":"Adds index_entry to the gieven index .","ref":"GitRekt.GitAgent.html#index_add/4","title":"GitRekt.GitAgent.index_add/4","type":"function"},{"doc":"Adds an index entry to the given index .","ref":"GitRekt.GitAgent.html#index_add/7","title":"GitRekt.GitAgent.index_add/7","type":"function"},{"doc":"Reads the given tree into the given index .","ref":"GitRekt.GitAgent.html#index_read_tree/4","title":"GitRekt.GitAgent.index_read_tree/4","type":"function"},{"doc":"Removes an index entry from the given index .","ref":"GitRekt.GitAgent.html#index_remove/4","title":"GitRekt.GitAgent.index_remove/4","type":"function"},{"doc":"Remove all entries from the given index under a given directory path .","ref":"GitRekt.GitAgent.html#index_remove_dir/4","title":"GitRekt.GitAgent.index_remove_dir/4","type":"function"},{"doc":"Writes the given index as a tree.","ref":"GitRekt.GitAgent.html#index_write_tree/3","title":"GitRekt.GitAgent.index_write_tree/3","type":"function"},{"doc":"Returns the Git object with the given oid .","ref":"GitRekt.GitAgent.html#object/3","title":"GitRekt.GitAgent.object/3","type":"function"},{"doc":"Returns the ODB.","ref":"GitRekt.GitAgent.html#odb/2","title":"GitRekt.GitAgent.odb/2","type":"function"},{"doc":"Returns true if the given oid exists in odb ; elsewise returns false .","ref":"GitRekt.GitAgent.html#odb_object_exists?/4","title":"GitRekt.GitAgent.odb_object_exists?/4","type":"function"},{"doc":"Return the raw data of the odb object with the given oid .","ref":"GitRekt.GitAgent.html#odb_read/4","title":"GitRekt.GitAgent.odb_read/4","type":"function"},{"doc":"Writes the given data into the odb .","ref":"GitRekt.GitAgent.html#odb_write/5","title":"GitRekt.GitAgent.odb_write/5","type":"function"},{"doc":"Returns an ODB writepack.","ref":"GitRekt.GitAgent.html#odb_writepack/2","title":"GitRekt.GitAgent.odb_writepack/2","type":"function"},{"doc":"Appends data to the given writepack .","ref":"GitRekt.GitAgent.html#odb_writepack_append/5","title":"GitRekt.GitAgent.odb_writepack_append/5","type":"function"},{"doc":"Commits the given writepack to the ODB.","ref":"GitRekt.GitAgent.html#odb_writepack_commit/4","title":"GitRekt.GitAgent.odb_writepack_commit/4","type":"function"},{"doc":"Returns a Git PACK representation of the given oids .","ref":"GitRekt.GitAgent.html#pack_create/3","title":"GitRekt.GitAgent.pack_create/3","type":"function"},{"doc":"Peels the given obj until a Git object of the specified type is met.","ref":"GitRekt.GitAgent.html#peel/3","title":"GitRekt.GitAgent.peel/3","type":"function"},{"doc":"Returns the Git reference with the given name .","ref":"GitRekt.GitAgent.html#reference/3","title":"GitRekt.GitAgent.reference/3","type":"function"},{"doc":"Creates a reference with the given name and target .","ref":"GitRekt.GitAgent.html#reference_create/5","title":"GitRekt.GitAgent.reference_create/5","type":"function"},{"doc":"Deletes a reference with the given name .","ref":"GitRekt.GitAgent.html#reference_delete/3","title":"GitRekt.GitAgent.reference_delete/3","type":"function"},{"doc":"Returns all Git references matching the given glob .","ref":"GitRekt.GitAgent.html#references/2","title":"GitRekt.GitAgent.references/2","type":"function"},{"doc":"Returns the Git object matching the given spec .","ref":"GitRekt.GitAgent.html#revision/3","title":"GitRekt.GitAgent.revision/3","type":"function"},{"doc":"Starts a Git agent linked to the current process for the repository at the given path .","ref":"GitRekt.GitAgent.html#start_link/2","title":"GitRekt.GitAgent.start_link/2","type":"function"},{"doc":"Returns the Git tag with the given name .","ref":"GitRekt.GitAgent.html#tag/3","title":"GitRekt.GitAgent.tag/3","type":"function"},{"doc":"Returns the Git tag author of the given tag .","ref":"GitRekt.GitAgent.html#tag_author/3","title":"GitRekt.GitAgent.tag_author/3","type":"function"},{"doc":"Returns the Git tag message of the given tag .","ref":"GitRekt.GitAgent.html#tag_message/3","title":"GitRekt.GitAgent.tag_message/3","type":"function"},{"doc":"Returns all Git tags.","ref":"GitRekt.GitAgent.html#tags/2","title":"GitRekt.GitAgent.tags/2","type":"function"},{"doc":"Executes the given cb inside a transaction.","ref":"GitRekt.GitAgent.html#transaction/4","title":"GitRekt.GitAgent.transaction/4","type":"function"},{"doc":"Returns the Git tree of the given revision .","ref":"GitRekt.GitAgent.html#tree/3","title":"GitRekt.GitAgent.tree/3","type":"function"},{"doc":"Returns the Git tree entries of the given tree .","ref":"GitRekt.GitAgent.html#tree_entries/3","title":"GitRekt.GitAgent.tree_entries/3","type":"function"},{"doc":"Returns the Git tree entry for the given revision and oid .","ref":"GitRekt.GitAgent.html#tree_entry_by_id/4","title":"GitRekt.GitAgent.tree_entry_by_id/4","type":"function"},{"doc":"Returns the Git tree entry for the given revision and path .","ref":"GitRekt.GitAgent.html#tree_entry_by_path/4","title":"GitRekt.GitAgent.tree_entry_by_path/4","type":"function"},{"doc":"","ref":"GitRekt.GitAgent.html#t:agent/0","title":"GitRekt.GitAgent.agent/0","type":"type"},{"doc":"","ref":"GitRekt.GitAgent.html#t:git_object/0","title":"GitRekt.GitAgent.git_object/0","type":"type"},{"doc":"","ref":"GitRekt.GitAgent.html#t:git_revision/0","title":"GitRekt.GitAgent.git_revision/0","type":"type"},{"doc":"Represents a Git blob.","ref":"GitRekt.GitBlob.html","title":"GitRekt.GitBlob","type":"module"},{"doc":"","ref":"GitRekt.GitBlob.html#t:t/0","title":"GitRekt.GitBlob.t/0","type":"type"},{"doc":"Represents a Git commit.","ref":"GitRekt.GitCommit.html","title":"GitRekt.GitCommit","type":"module"},{"doc":"","ref":"GitRekt.GitCommit.html#t:t/0","title":"GitRekt.GitCommit.t/0","type":"type"},{"doc":"Represents a Git diff.","ref":"GitRekt.GitDiff.html","title":"GitRekt.GitDiff","type":"module"},{"doc":"","ref":"GitRekt.GitDiff.html#t:t/0","title":"GitRekt.GitDiff.t/0","type":"type"},{"doc":"Represents a Git index.","ref":"GitRekt.GitIndex.html","title":"GitRekt.GitIndex","type":"module"},{"doc":"","ref":"GitRekt.GitIndex.html#t:t/0","title":"GitRekt.GitIndex.t/0","type":"type"},{"doc":"Represents a Git index entry.","ref":"GitRekt.GitIndexEntry.html","title":"GitRekt.GitIndexEntry","type":"module"},{"doc":"","ref":"GitRekt.GitIndexEntry.html#t:t/0","title":"GitRekt.GitIndexEntry.t/0","type":"type"},{"doc":"Represents a Git ODB.","ref":"GitRekt.GitOdb.html","title":"GitRekt.GitOdb","type":"module"},{"doc":"","ref":"GitRekt.GitOdb.html#t:t/0","title":"GitRekt.GitOdb.t/0","type":"type"},{"doc":"Represents a Git reference.","ref":"GitRekt.GitRef.html","title":"GitRekt.GitRef","type":"module"},{"doc":"","ref":"GitRekt.GitRef.html#t:t/0","title":"GitRekt.GitRef.t/0","type":"type"},{"doc":"Protocol for implementing access to Git repositories.","ref":"GitRekt.GitRepo.html","title":"GitRekt.GitRepo","type":"protocol"},{"doc":"Returns the agent for the given repo .","ref":"GitRekt.GitRepo.html#get_agent/1","title":"GitRekt.GitRepo.get_agent/1","type":"function"},{"doc":"Pushes the","ref":"GitRekt.GitRepo.html#push/2","title":"GitRekt.GitRepo.push/2","type":"function"},{"doc":"","ref":"GitRekt.GitRepo.html#t:t/0","title":"GitRekt.GitRepo.t/0","type":"type"},{"doc":"Represents a Git tag.","ref":"GitRekt.GitTag.html","title":"GitRekt.GitTag","type":"module"},{"doc":"","ref":"GitRekt.GitTag.html#t:t/0","title":"GitRekt.GitTag.t/0","type":"type"},{"doc":"Represents a Git tree.","ref":"GitRekt.GitTree.html","title":"GitRekt.GitTree","type":"module"},{"doc":"","ref":"GitRekt.GitTree.html#t:t/0","title":"GitRekt.GitTree.t/0","type":"type"},{"doc":"Represents a Git tree entry.","ref":"GitRekt.GitTreeEntry.html","title":"GitRekt.GitTreeEntry","type":"module"},{"doc":"","ref":"GitRekt.GitTreeEntry.html#t:t/0","title":"GitRekt.GitTreeEntry.t/0","type":"type"},{"doc":"Represents a Git writepack.","ref":"GitRekt.GitWritePack.html","title":"GitRekt.GitWritePack","type":"module"},{"doc":"","ref":"GitRekt.GitWritePack.html#t:t/0","title":"GitRekt.GitWritePack.t/0","type":"type"},{"doc":"Conveniences for reading and writting Git pack files.","ref":"GitRekt.Packfile.html","title":"GitRekt.Packfile","type":"module"},{"doc":"Returns a list of ODB objects and their type for the given PACK data .","ref":"GitRekt.Packfile.html#parse/1","title":"GitRekt.Packfile.parse/1","type":"function"},{"doc":"Same as parse/1 but starts from the given iterator .","ref":"GitRekt.Packfile.html#parse/2","title":"GitRekt.Packfile.parse/2","type":"function"},{"doc":"Returns the PACK version and the number of objects it contains.","ref":"GitRekt.Packfile.html#parse_header/1","title":"GitRekt.Packfile.parse_header/1","type":"function"},{"doc":"","ref":"GitRekt.Packfile.html#t:obj/0","title":"GitRekt.Packfile.obj/0","type":"type"},{"doc":"","ref":"GitRekt.Packfile.html#t:obj_iter/0","title":"GitRekt.Packfile.obj_iter/0","type":"type"},{"doc":"Conveniences for Git transport protocol and server side commands. This module implements version 2 of Git's wire protocol . It functions as a very basic finite-state machine by processing incoming client requests and forwarding them to the underlying service implementation (respectively receive-pack and upload-pack ). The state machine is initialized by calling new/2 with the Git repository and command to execute. By passing incoming data to next/2 , the underlying service transit to the next state. Once the client and the server are done with exchanging Git objects, the service will reach the :done state. When processing a entire (not chunked), one can use run/2 to execute all the steps in a single call.","ref":"GitRekt.WireProtocol.html","title":"GitRekt.WireProtocol","type":"behaviour"},{"doc":"Returns a stream of decoded PKT-LINE s for the given pkt .","ref":"GitRekt.WireProtocol.html#decode/1","title":"GitRekt.WireProtocol.decode/1","type":"function"},{"doc":"Returns true if service is done; elsewise returns false .","ref":"GitRekt.WireProtocol.html#done?/1","title":"GitRekt.WireProtocol.done?/1","type":"function"},{"doc":"Returns an PKT-LINE encoded representation of the given lines .","ref":"GitRekt.WireProtocol.html#encode/1","title":"GitRekt.WireProtocol.encode/1","type":"function"},{"doc":"Returns a new service object for the given repo and executable .","ref":"GitRekt.WireProtocol.html#new/3","title":"GitRekt.WireProtocol.new/3","type":"function"},{"doc":"Runs the given service to the next step.","ref":"GitRekt.WireProtocol.html#next/2","title":"GitRekt.WireProtocol.next/2","type":"function"},{"doc":"Callback used to transist a service to the next step.","ref":"GitRekt.WireProtocol.html#c:next/2","title":"GitRekt.WireProtocol.next/2","type":"callback"},{"doc":"Returns the given data formatted as PKT-LINE","ref":"GitRekt.WireProtocol.html#pkt_line/1","title":"GitRekt.WireProtocol.pkt_line/1","type":"function"},{"doc":"Returns a stream describing each ref and it current value.","ref":"GitRekt.WireProtocol.html#reference_discovery/3","title":"GitRekt.WireProtocol.reference_discovery/3","type":"function"},{"doc":"Runs all the steps of the given service at once.","ref":"GitRekt.WireProtocol.html#run/3","title":"GitRekt.WireProtocol.run/3","type":"function"},{"doc":"Sets the given service to the next logical step without performing any action.","ref":"GitRekt.WireProtocol.html#skip/1","title":"GitRekt.WireProtocol.skip/1","type":"function"},{"doc":"Callback used to transist a service to the next step without performing any action.","ref":"GitRekt.WireProtocol.html#c:skip/1","title":"GitRekt.WireProtocol.skip/1","type":"callback"},{"doc":"Module implementing the git-receive-pack command.","ref":"GitRekt.WireProtocol.ReceivePack.html","title":"GitRekt.WireProtocol.ReceivePack","type":"module"},{"doc":"","ref":"GitRekt.WireProtocol.ReceivePack.html#t:cmd/0","title":"GitRekt.WireProtocol.ReceivePack.cmd/0","type":"type"},{"doc":"","ref":"GitRekt.WireProtocol.ReceivePack.html#t:t/0","title":"GitRekt.WireProtocol.ReceivePack.t/0","type":"type"},{"doc":"Module implementing the git-upload-pack command.","ref":"GitRekt.WireProtocol.UploadPack.html","title":"GitRekt.WireProtocol.UploadPack","type":"module"},{"doc":"","ref":"GitRekt.WireProtocol.UploadPack.html#t:t/0","title":"GitRekt.WireProtocol.UploadPack.t/0","type":"type"},{"doc":"Getting Started This guide is an introduction to git.limo , a Git repository web service written in Elixir. This umbrella project is split into three applications: :gitrekt - Low-level Git functionalities written in C available as NIFs (see GitRekt.Git ). It also provides native support for Git transfer protocols and PACK format . :gitgud - Defines database schemas such as GitGud.User and GitGud.Repo and provides building-blocks for authentication, authorization, Git SSH and HTTP transport protocols , etc. :gitgud_web - Web-frontend similar to the one offered by GitHub providing a user-friendly management tool for Git repositories. It also features a GraphQL API . In the following sections, we will provide an overview of those components and how they interact with each other. Feel free to access their respective module documentation for more specific examples, options and configuration.","ref":"getting-started.html","title":"Getting Started","type":"extras"}]